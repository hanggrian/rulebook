block.tag.punctuation=End ''{0}'' with a period.
built.in.types=Use built-in type ''{0}''.
confusing.predicate.equals=Use equals and replace call with ''{0}''.
confusing.predicate.negates=Omit negation and replace call with ''{0}''.
file.size=Reduce file size to ''{0}''.
null.equality=Use operator ''{0}''.
todo.comment.keyword=Capitalize keyword ''{0}''.
todo.comment.separator=Omit separator ''{0}''.
# Declaring
abstract.class.definition=Omit 'abstract' modifier.
contract.function.definition=Put 'inline' modifier.
exception.inheritance=Extend from class 'Exception'.
number.suffix.for.float=Tag float literal by 'f'.
# Naming
class.name.acronym=Rename acronym to ''{0}''.
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Rename utility class to ''{0}''.
illegal.variable.name=Use descriptive name.
property.name.interop=Rename property to ''{0}''.
required.generic.name=Use common generics ''{0}''.
# Ordering
block.tag.order=Arrange tag ''{0}'' before ''{1}''.
built.in.function.position=Move ''{0}'' last.
inner.class.position=Move inner class at the bottom.
member.order=Arrange member ''{0}'' before ''{1}''.
overload.function.position=Move ''{0}'' next to each other.
# Spacing
block.comment.spaces.single.start=Add space after '/**'.
block.comment.spaces.single.end=Add space before '*/'.
block.comment.spaces.multi=Add space after '*'.
block.comment.trim.first=Remove blank line after '/**'.
block.comment.trim.last=Remove blank line before '*/'.
block.tag.indentation=Indent block tag description by ''{0}''.
block.tag.separator=Remove blank line before block tag group.
case.separator.missing=Add blank line after multiline branch.
case.separator.unexpected=Remove blank line after single-line branch.
comment.trim=Remove blank line after '//'.
duplicate.blank.line.in.block.comment=Remove consecutive blank line after '*'.
duplicate.blank.line.in.comment=Remove consecutive blank line after '//'
unexpected.blank.line.before.package=Remove blank line at the beginning.
# Stating
illegal.throw=Throw a narrower type.
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if' block.
redundant.default=Omit redundant 'else' condition.
redundant.else=Omit redundant 'else' condition.
unnecessary.switch=Replace 'when' with 'if' condition.
# Wrapping
block.comment.unwrap=Convert into single-line.
elvis.wrap.missing=Put newline before '?:'.
elvis.wrap.unexpected=Omit newline before '?:'.
empty.code.block.unwrap=Omit newline between '{}'.
infix.call.wrap.missing=Put newline before call ''{0}''.
infix.call.wrap.unexpected=Omit newline before call ''{0}''.
