block.tag.punctuation=End ''{0}'' with a period.
built.in.types=Use Kotlin type ''{0}''.
confusing.predicate.equals=Use equals and replace call with ''{0}''.
confusing.predicate.negates=Remove negation and replace call with ''{0}''.
file.size=Reduce file size to ''{0}''.
null.equality=Use operator ''{0}''.
todo.comment.keyword=Illegal keyword ''{0}''.
todo.comment.separator=Illegal separator ''{0}''.
# Declaring
number.suffix.for.float=Floats are tagged by 'f'.
# Defining
abstract.class.definition=Remove abstract modifier.
exception.inheritance=Extend from Exception class.
contract.function.definition=Missing inline modifier.
# Naming
class.name.acronym=Rename acronym to ''{0}''.
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Utility class should be named ''{0}''.
illegal.variable.name=Use descriptive name.
property.name.interop=Rename property to ''{0}''.
required.generic.name=Use common generics ''{0}''.
# Ordering
block.tag.order=Put tag ''{0}'' before ''{1}''.
built.in.function.position=Put ''{0}'' last.
inner.class.position=Put inner class at the bottom.
member.order=Put member ''{0}'' before ''{1}''.
overload.function.position=Put ''{0}'' next to each other.
# Spacing
block.comment.spaces.single.start=Missing whitespace after '/**'.
block.comment.spaces.single.end=Missing whitespace before '*/'.
block.comment.spaces.multi=Missing whitespace after '*'.
block.comment.trim.first=Unexpected newline after '/**'.
block.comment.trim.last=Unexpected newline before '*/'.
block.tag.indentation=Indent block tag description by ''{0}''.
block.tag.separator=Missing newline before block tag group.
case.separator.missing=Missing newline after multiline branch.
case.separator.unexpected=Unexpected newline after single-line branch.
comment.trim=Unexpected newline after '//'.
duplicate.blank.line.in.block.comment=Unexpected consecutive newline after '*'.
duplicate.blank.line.in.comment=Unexpected consecutive newline after '//'
unexpected.blank.line.before.package=Unexpected newline at the beginning.
# Stating
illegal.throw=Throw a narrower type.
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if'.
redundant.default=Remove redundant 'else'.
redundant.else=Remove redundant 'else'.
unnecessary.switch=Replace 'when' with 'if'.
# Wrapping
block.comment.unwrap=Convert into single-line.
elvis.wrap.missing=Missing newline before '?:'.
elvis.wrap.unexpected=Unexpected newline before '?:'.
empty.code.block.unwrap=Unexpected whitespace between '{}'.
infix.call.wrap.missing=Missing newline before call ''{0}''.
infix.call.wrap.unexpected=Unexpected newline before call ''{0}''.
# Others
companion=companion object
constructor=constructor
function=function
initializer=initializer block
property=property
