qualifier.consistency=Remove redundant qualifier.
utility.class.instance.hiding.constructor=Missing private constructor.
utility.class.instance.hiding.constructor.modifier=Constructor has unexpected public modifier.
utility.class.instance.hiding.modifier=Missing final modifier.
# flow
default.flattening=Remove redundant 'default'.
else.flattening=Remove redundant 'else'.
if.else.flattening.invert=Invert 'if' condition.
if.else.flattening.lift=Lift 'else' and add 'return' in 'if'.
switch.case.branching=Replace 'switch' with 'if'.
# fold
assignment.wrapping=Break assignment into newline.
chain.call.continuation=Break method call into newline.
operator.wrapping.missing=Missing newline before operator ''{0}''.
operator.wrapping.unexpected=Unexpected newline before operator ''{0}''.
statement.wrapping=Missing newline after ''{0}''.
parameter.wrapping.argument=Each parameter should have a newline.
# layout
builtin.function.position=Put ''{0}'' last.
class.member.ordering=Put member ''{0}'' before ''{1}''.
import.ordering.sort=Put directive ''{0}'' before ''{1}''.
import.ordering.join=Unexpected newline before directive ''{0}''.
inner.class.position=Put inner class at the bottom.
overload.function.position=Put ''{0}'' next to each other.
# name
class.name.acronym.capitalization=Rename acronym to ''{0}''.
class.final.name.disallowing.all=Avoid meaningless word ''{0}''.
class.final.name.disallowing.util=Utility class should be named ''{0}''.
generics.name.allowing=Use common generics ''{0}''.
variable.name.disallowing=Use descriptive name.
# value
float.literal.tagging.num=Floats are tagged by 'f'.
float.literal.tagging.hex=Hexadecimals are tagged by 'F'.
# others
class=class
constructor=constructor
function=function
property=property
