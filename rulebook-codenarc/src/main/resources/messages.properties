block.tag.punctuation=End ''{0}'' with a period.
redundant.qualifier=Omit redundant ''{0}''.
todo.comment.keyword=Capitalize keyword ''{0}''.
todo.comment.separator=Omit separator ''{0}''.
trailing.comma.in.call.single=Omit trailing comma.
trailing.comma.in.call.multi=Put trailing comma.
# Clipping
empty.braces.clip=Convert into '{}'.
empty.brackets.clip=Convert into '[]'.
empty.parentheses.clip=Convert into '()'.
empty.tags.clip=Convert into '<>'.
short.block.comment.clip=Convert into single-line.
# Declaring
number.suffix.for.double=Tag double literal by 'd'.
number.suffix.for.float=Tag float literal by 'f'.
number.suffix.for.integer=Tag integer literal by 'i'.
unnecessary.parentheses.in.lambda=Omit parentheses '()'.
utility.class.definition.constructor=Add private constructor.
utility.class.definition.constructor.modifier=Omit 'public' modifier from constructor.
utility.class.definition.modifier=Put 'final' modifier.
# Naming
class.name.abbreviation=Rename abbreviation to ''{0}''.
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Rename utility class to ''{0}''.
illegal.variable.name=Use descriptive name.
required.generics.name=Use common generics ''{0}''.
# Ordering
block.tag.order=Arrange tag ''{0}'' before ''{1}''.
built.in.function.position=Move ''{0}'' to last.
import.order.sort=Arrange directive ''{0}'' before ''{1}''.
import.order.join=Remove blank line before directive ''{0}''.
inner.class.position=Move inner class to the bottom.
member.order=Arrange member ''{0}'' before ''{1}''.
overload.function.position=Move ''{0}'' next to each other.
# Spacing
block.tag.indentation=Indent block tag description by '4 spaces'.
case.separator.missing=Add blank line after multiline branch.
case.separator.unexpected=Remove blank line after single-line branch.
duplicate.blank.line.in.comment=Remove consecutive blank line after '//'.
member.separator=Add blank line after ''{0}''.
missing.blank.line.before.block.tags=Add blank line before block tag group.
# Stating
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if' block.
redundant.default=Omit redundant 'default' condition.
redundant.else=Omit redundant 'else' condition.
unnecessary.switch=Replace 'switch' with 'if' condition.
# Trimming
brackets.trim.first=Remove blank line after '['.
brackets.trim.last=Remove blank line before ']'.
comment.trim=Remove blank line after '//'.
parentheses.trim.first=Remove blank line after '('.
parentheses.trim.last=Remove blank line before ')'.
tags.trim.first=Remove blank line after '<'.
tags.trim.last=Remove blank line before '>'.
# Wrapping
assignment.wrap=Break assignment into newline.
chain.call.wrap.missing=Put newline before '.'.
chain.call.wrap.unexpected=Omit newline before '.'.
lambda.wrap=Put newline after '->'.
operator.wrap.missing=Put newline after operator ''{0}''.
operator.wrap.unexpected=Omit newline before operator ''{0}''.
parameter.wrap=Break each parameter into newline.
statement.wrap=Put newline after ''{0}''.
