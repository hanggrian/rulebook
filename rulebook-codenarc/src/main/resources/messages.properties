redundant.qualifier=Remove redundant qualifier.
trailing.comma.in.call.single=Remove trailing comma.
trailing.comma.in.call.multi=Put trailing comma.
# Declaring
number.suffix.for.double=Doubles are tagged by 'd'.
number.suffix.for.float=Floats are tagged by 'f'.
number.suffix.for.integer=Integers are tagged by 'i'.
# Defining
utility.class.definition.constructor=Missing private constructor.
utility.class.definition.constructor.modifier=Constructor has unexpected public modifier.
utility.class.definition.modifier=Missing final modifier.
# Naming
class.name.acronym=Rename acronym to ''{0}''.
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Utility class should be named ''{0}''.
illegal.variable.name=Use descriptive name.
required.generic.name=Use common generics ''{0}''.
# Ordering
built.in.function.position=Put ''{0}'' last.
import.order.sort=Put directive ''{0}'' before ''{1}''.
import.order.join=Unexpected newline before directive ''{0}''.
inner.class.position=Put inner class at the bottom.
member.order=Put member ''{0}'' before ''{1}''.
overload.function.position=Put ''{0}'' next to each other.
# Spacing
comment.trim=Unexpected newline after '//'.
duplicate.blank.line.in.comment=Unexpected consecutive newline after '//'.
# Stating
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if'.
redundant.default=Remove redundant 'default'.
redundant.else=Remove redundant 'else'.
unnecessary.switch=Replace 'switch' with 'if'.
# Wrapping
assignment.wrap=Break assignment into newline.
operator.wrap.missing=Missing newline before operator ''{0}''.
operator.wrap.unexpected=Unexpected newline before operator ''{0}''.
statement.wrap=Missing newline after ''{0}''.
parameter.wrap.argument=Each parameter should have a newline.
# Others
class=class
constructor=constructor
function=function
property=property
