redundant.qualifier=Omit redundant qualifier.
trailing.comma.in.call.single=Omit trailing comma.
trailing.comma.in.call.multi=Put trailing comma.
# Declaring
number.suffix.for.double=Tag double literal by 'd'.
number.suffix.for.float=Tag float literal by 'f'.
number.suffix.for.integer=Tag integer literal by 'i'.
utility.class.definition.constructor=Add private constructor.
utility.class.definition.constructor.modifier=Omit 'public' modifier from constructor.
utility.class.definition.modifier=Put 'final' modifier.
# Naming
class.name.acronym=Rename acronym to ''{0}''.
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Rename utility class to ''{0}''.
illegal.variable.name=Use descriptive name.
required.generic.name=Use common generics ''{0}''.
# Ordering
built.in.function.position=Move ''{0}'' last.
import.order.sort=Arrange directive ''{0}'' before ''{1}''.
import.order.join=Remove blank line before directive ''{0}''.
inner.class.position=Move inner class at the bottom.
member.order=Arrange member ''{0}'' before ''{1}''.
overload.function.position=Move ''{0}'' next to each other.
# Spacing
case.separator.missing=Add blank line after multiline branch.
case.separator.unexpected=Remove blank line after single-line branch.
comment.trim=Remove blank line after '//'.
duplicate.blank.line.in.comment=Remove consecutive blank line after '//'.
member.separator=Add blank line after ''{0}''.
# Stating
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if' block.
redundant.default=Omit redundant 'default' condition.
redundant.else=Omit redundant 'else' condition.
unnecessary.switch=Replace 'switch' with 'if' condition.
# Wrapping
assignment.wrap=Break assignment into newline.
operator.wrap.missing=Put newline before operator ''{0}''.
operator.wrap.unexpected=Omit newline before operator ''{0}''.
statement.wrap=Put newline after ''{0}''.
parameter.wrap.argument=Break each parameter into newline.
