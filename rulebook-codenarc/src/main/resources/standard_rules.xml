<?xml version="1.0" encoding="UTF-8"?>
<!--
  The standard Rulebook CodeNarc configuration.

  Rulebook: https://github.com/hanggrian/rulebook/
  CodeNarc: https://codenarc.org/
  Source template: https://github.com/google/protobuf-gradle-plugin/blob/master/config/codenarc/codenarc.xml
-->
<ruleset
  xmlns="http://codenarc.org/ruleset/1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://codenarc.org/ruleset/1.0 http://codenarc.org/ruleset-schema.xsd"
  xsi:noNamespaceSchemaLocation="http://codenarc.org/ruleset-schema.xsd">

  <description>Rulebook third-party rules</description>

  <ruleset-ref path="rulesets/basic.xml">
    <exclude name="EmptyCatchBlock"/>
    <exclude name="EmptyClass"/>
    <exclude name="EmptyElseBlock"/>
    <exclude name="EmptyFinallyBlock"/>
    <exclude name="EmptyForStatement"/>
    <exclude name="EmptyIfStatement"/>
    <exclude name="EmptyInstanceInitializer"/>
    <exclude name="EmptyMethod"/>
    <exclude name="EmptyStaticInitializer"/>
    <exclude name="EmptySwitchStatement"/>
    <exclude name="EmptySynchronizedStatement"/>
    <exclude name="EmptyTryBlock"/>
    <exclude name="EmptyWhileStatement"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/braces.xml"/>

  <ruleset-ref path="rulesets/concurrency.xml"/>

  <ruleset-ref path="rulesets/convention.xml">
    <exclude name="CompileStatic"/>
    <exclude name="NoDouble"/>
    <exclude name="NoFloat"/>
    <exclude name="NoDef"/>
    <exclude name="VariableTypeRequired"/>
    <exclude name="FieldTypeRequired"/>
    <exclude name="MethodParameterTypeRequired"/>
    <exclude name="MethodReturnTypeRequired"/>
    <exclude name="ParameterReassignment"/>
    <exclude name="InvertedIfElse"/>
    <exclude name="AbstractClassWithPublicConstructor"/>
    <exclude name="PublicMethodsBeforeNonPublicMethods"/>
    <exclude name="StaticMethodsBeforeInstanceMethods"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/design.xml">
    <exclude name="Instanceof"/>
    <exclude name="ImplementationAsType"/>
    <exclude name="BuilderMethodWithSideEffects"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/dry.xml">
    <exclude name="DuplicateStringLiteral"/>
    <exclude name="DuplicateNumberLiteral"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/exceptions.xml"/>

  <ruleset-ref path="rulesets/formatting.xml">
    <rule-config name="LineLength">
      <property name="length" value="100"/>
    </rule-config>

    <exclude name="ClassEndsWithBlankLine"/>
    <exclude name="ClassStartsWithBlankLine"/>
    <exclude name="Indentation"/>
    <exclude name="SpaceAfterOpeningBrace"/>
    <exclude name="SpaceBeforeClosingBrace"/>
    <exclude name="SpaceAroundMapEntryColon"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/generic.xml"/>

  <ruleset-ref path="rulesets/grails.xml"/>

  <ruleset-ref path="rulesets/groovyism.xml"/>

  <ruleset-ref path="rulesets/imports.xml">
    <rule-config name="MisorderedStaticImports">
      <property name="comesBefore" value="false"/>
    </rule-config>
  </ruleset-ref>

  <ruleset-ref path="rulesets/jdbc.xml"/>

  <ruleset-ref path="rulesets/junit.xml">
    <exclude name="JUnitTestMethodWithoutAssert"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/naming.xml">
    <exclude name="ConfusingMethodName"/>
    <!--exclude name="MethodName"/-->
    <exclude name="FactoryMethodName"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/security.xml">
    <exclude name="JavaIoPackageAccess"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/serialization.xml"/>

  <ruleset-ref path="rulesets/size.xml">
    <!-- AbcMetric, CrapMetric and CyclomaticComplexity require external libs -->
    <exclude name="AbcMetric"/>
    <exclude name="CrapMetric"/>
    <exclude name="CyclomaticComplexity"/>
    <exclude name="NestedBlockDepth"/>
    <exclude name="MethodCount"/>
  </ruleset-ref>

  <!--ruleset-ref path='rulesets/unused.xml'/-->

  <ruleset-ref path="rulesets/unnecessary.xml">
    <exclude name="UnnecessaryCollectCall"/>
    <exclude name="UnnecessaryGetter"/>

    <!--exclude name="UnnecessaryGString"/-->
    <exclude name="UnnecessarySetter"/>
    <exclude name="UnnecessaryPublicModifier"/>
    <exclude name="UnnecessaryReturnKeyword"/>

    <!-- Poor suggestion when using static typing -->
    <exclude name="UnnecessaryObjectReferences"/>

    <!-- Clash with 'UtilityClassInstanceHiding' -->
    <exclude name="UnnecessaryConstructor"/>
  </ruleset-ref>

  <ruleset-ref path="rulesets/comments.xml">
    <exclude name="ClassJavadoc"/>
    <exclude name="JavadocEmptyAuthorTag"/>
    <exclude name="JavadocEmptyExceptionTag"/>
    <exclude name="JavadocEmptyParamTag"/>
    <exclude name="JavadocEmptyReturnTag"/>
    <exclude name="JavadocEmptySeeTag"/>
    <exclude name="JavadocEmptySinceTag"/>
    <exclude name="JavadocEmptyThrowsTag"/>
    <exclude name="JavadocEmptyVersionTag"/>
    <exclude name="JavadocMissingExceptionDescription"/>
    <exclude name="JavadocMissingParamDescription"/>
    <exclude name="JavadocMissingThrowsDescription"/>
  </ruleset-ref>

  <!-- Basic -->
  <rule class="com.hanggrian.rulebook.codenarc.BlockTagPunctuationRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.RedundantQualifierRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.TodoCommentRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.TrailingCommaInCallRule"/>

  <!-- Declaring -->
  <rule class="com.hanggrian.rulebook.codenarc.NumberSuffixForDoubleRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.NumberSuffixForFloatRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.NumberSuffixForIntegerRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.UnnecessaryParenthesesInLambdaRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.UtilityClassDefinitionRule"/>

  <!-- Naming -->
  <rule class="com.hanggrian.rulebook.codenarc.ClassNameAcronymRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.IllegalClassFinalNameRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.IllegalVariableNameRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.RequiredGenericNameRule"/>

  <!-- Ordering -->
  <rule class="com.hanggrian.rulebook.codenarc.BlockTagOrderRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.BuiltInFunctionPositionRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.ImportOrderRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.InnerClassPositionRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.MemberOrderRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.OverloadFunctionPositionRule"/>

  <!-- Spacing -->
  <rule class="com.hanggrian.rulebook.codenarc.BlockTagIndentationRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.CaseSeparatorRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.CommentTrimRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.DuplicateBlankLineInCommentRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.EmptyCodeBlockJoinRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.MemberSeparatorRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.MissingBlankLineBeforeBlockTagsRule"/>

  <!-- Stating -->
  <rule class="com.hanggrian.rulebook.codenarc.NestedIfElseRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.RedundantDefaultRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.RedundantElseRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.UnnecessarySwitchRule"/>

  <!-- Wrapping -->
  <rule class="com.hanggrian.rulebook.codenarc.AssignmentWrapRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.ChainCallWrapRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.LambdaWrapRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.OperatorWrapRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.ParameterWrapRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.ShortBlockCommentJoinRule"/>
  <rule class="com.hanggrian.rulebook.codenarc.StatementWrapRule"/>
</ruleset>
