{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Third-party rules for JVM and Python lint tools, meant to be used in conjunction with official ones. Most of the rules are opinionated personal code styles. However, some already exists in other linters, providing the same experience across multiple languages.</p> Language Linter Variants Kotlin Ktlint Ktlint Style Java Checkstyle Sun Style or Google Java Style Groovy CodeNarc Groovy Style Python Pylint Pylint Style or Google Python Style <p>View all rules</p>"},{"location":"#download","title":"Download","text":""},{"location":"#maven","title":"Maven","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    ktlint \"com.hanggrian.rulebook:rulebook-ktlint:$version\"\n    checkstyle \"com.hanggrian.rulebook:rulebook-checkstyle:$version\"\n    codenarc \"com.hanggrian.rulebook:rulebook-codenarc:$version\"\n}\n</code></pre>"},{"location":"#pypi","title":"PyPI","text":"<pre><code>pip install pylint regex rulebook-pylint\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#ktlint","title":"Ktlint","text":"<ul> <li>Apply Ktlint Integration   to Gradle project.</li> <li>Using configuration <code>ktlint</code>, add this project as dependency.</li> </ul> <pre><code>configurations {\n    ktlint\n}\n\ndependencies {\n    ktlint \"com.hanggrian.rulebook:rulebook-ktlint:$libraryVersion\"\n}\n\n// the rest of ktlint tasks' configuration\n</code></pre>"},{"location":"#checkstyle","title":"Checkstyle","text":"<ul> <li>Apply Checkstyle Gradle Plugin.</li> <li>Using configuration <code>checkstyle</code>, add this project as dependency.</li> <li>Point to local config file or put in <code>/config/checkstyle/codenarc.xml</code>.</li> </ul> <pre><code>plugins {\n    checkstyle\n}\n\ncheckstyle {\n    toolVersion \"$checkstyleVersion\"\n    configFile \"path/to/rulebook_checkstyle.xml\"\n}\n\ndependencies {\n    checkstyle \"com.hanggrian.rulebook:rulebook-checkstyle:$libraryVersion\"\n}\n</code></pre>"},{"location":"#codenarc","title":"CodeNarc","text":"<ul> <li>Apply CodeNarc Gradle Plugin.</li> <li>Using configuration <code>codenarc</code>, add this project as dependency.</li> <li>Point to local config file or put in <code>/config/codenarc/codenarc.xml</code>.</li> </ul> <pre><code>plugins {\n    codenarc\n}\n\ncodenarc {\n    toolVersion \"$codenarcVersion\"\n    configFile \"path/to/rulebook_codenarc.xml\"\n}\n\ndependencies {\n    codenarc \"com.hanggrian.rulebook:rulebook-codenarc:$libraryVersion\"\n}\n</code></pre>"},{"location":"#pylint","title":"Pylint","text":"<ul> <li>Point config file to local <code>pylintrc</code>.</li> </ul>"},{"location":"#first-time-installation","title":"First time installation","text":"<p>Presuming the IDE is IntelliJ IDEA or PyCharm, consider applying the linter style to it.</p>"},{"location":"#ktlint_1","title":"Ktlint","text":"<p>Explained in Ktlint IntelliJ IDEA Configuration, using standard Kotlin coding conventions is enough:</p> <ul> <li>In File &gt; Settings &gt; Editor &gt; Code Style &gt; Kotlin, set from   Kotlin style guide.</li> <li>Append <code>kotlin.code.style=official</code> to root <code>gradle.properties</code>.</li> </ul>"},{"location":"#checkstyle_1","title":"Checkstyle","text":"<p>Explained in Google Java Format:</p> <ul> <li>In File &gt; Settings &gt; Editor &gt; Code Style &gt; Java, import   IntelliJ Java Google Style file.</li> </ul>"},{"location":"#pylint_1","title":"Pylint","text":"<p>Apply few changes in settings:</p> <ul> <li>In File &gt; Settings &gt; Editor &gt; Code Style &gt; Python &gt; Blank Lines:</li> <li>Set After local imports and Before the first method to 0.</li> <li>Set the rest to 1.</li> </ul>"},{"location":"compatibility_table/","title":"Compatibility table","text":""},{"location":"compatibility_table/#legend","title":"Legend","text":"\u2705 \u2713 \u2717 \u274c Rule is fully supported Functionality already exists in other or external rules Possible but currently not implemented Not supported by the linter Not applicable for this language"},{"location":"compatibility_table/#basic-rules","title":"Basic rules","text":"Rule Kotlin Java Groovy Python Rationale Block tag punctuation \u2705 \u2705 \u2717 Oracle: Javadoc tool Built-in types \u2705 Kotlin: Mapped types Confusing predicate \u2705 Kotlin: Filter by predicate Explicit import \u2713 \u2713 \u2713 \u2713 Google: Import statements File size \u2705 \u2713 \u2713 \u2705 Kotlin: Source file organization Null equality \u2705 Kotlin: Structural equality Redundant qualifier \u2705 \u2705 JetBrains: Redundant qualifier name TODO comment \u2705 \u2713 \u2717 \u2705 JetBrains: TODO comments Trailing comma in collection \u2713 \u2713 \u2713 Python: When to use trailing commas Trailing comma in declaration \u2713 \u2717 \u2705 Kotlin: Trailing commas Trailing comma in definition \u2713 \u2705 Trailing commas Unused import \u2713 \u2713 \u2713 \u2713 Common: Imports not optimized"},{"location":"compatibility_table/#declaring-rules","title":"Declaring rules","text":"Rule Kotlin Java Groovy Python Rationale Number suffix for double \u2705 \u2705 Groovy: Number type suffixes Number suffix for float \u2705 \u2705 \u2705 Number type suffixes Number suffix for integer \u2705 Number type suffixes Number suffix for long \u2713 \u2713 Number type suffixes String quotes \u2713 \u2705 Google: Use single quotes"},{"location":"compatibility_table/#defining-rules","title":"Defining rules","text":"Rule Kotlin Java Groovy Python Rationale Abstract class definition \u2705 \u2705 \u2713 \u2717 Common: Abstraction not needed Contract function definition \u2705 Kotlin: Kotlin contracts Exception inheritance \u2705 \u2705 \u2713\u2713 \u2705 Oracle: Creating exceptions Utility class definition \u2713 \u2705 Kotlin: Object declarations"},{"location":"compatibility_table/#naming-rules","title":"Naming rules","text":"Rule Kotlin Java Groovy Python Rationale Class name acronym \u2705 \u2713 \u2705 \u2705 Kotlin: Choose good names Class name \u2713 \u2713 \u2713\u2713 \u2713 Oracle: Naming conventions Constant property name \u2713 \u2713 \u2713 \u2713 Naming conventions File name \u2713 \u2713 \u2713 Kotlin: Source file names Identifier name \u2713 \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 \u2713\u2713\u2713 \u2713 Naming conventions Illegal class final name \u2705 \u2705 \u2705 \u2705 Choose good names Illegal variable name \u2705 \u2713 \u2705 \u2713 Common: Purposeful name Package name \u2713 \u2713 \u2713 \u2713 Naming conventions Property name interop \u2705 Kotlin: Calling Kotlin from Java Required generic name \u2705 \u2713\u2713\u2713\u2713 \u2705 \u2705 Oracle: Generic types"},{"location":"compatibility_table/#ordering-rules","title":"Ordering rules","text":"Rule Kotlin Java Groovy Python Rationale Block tag order \u2705 \u2713 \u2717 Android: Block tags Built-in function position \u2705 \u2705 \u2705 \u2705 Common: Business logic first Import order \u2713 \u2713 \u2705 \u2713 Google: Ordering and spacing Inner class position \u2705 \u2713 \u2705 \u2705 Kotlin: Class layout Member order \u2705 \u2705 \u2705 \u2705 Class layout Overload function position \u2705 \u2713 \u2705 Kotlin: Overload layout Static import position \u2713 \u2713 Ordering and spacing"},{"location":"compatibility_table/#spacing-rules","title":"Spacing rules","text":"Rule Kotlin Java Groovy Python Rationale Block comment spaces \u2705 \u2713 \u2713\u2713 Oracle: Javadoc reference Block comment trim \u2705 \u2705 \u2713\u2713 \u2705 Common: Clean comment Block tag indentation \u2705 \u2713 \u2717 Google: Block tags Block tag separator \u2705 \u2713 \u2717 Kotlin: KDoc syntax Case separator \u2705 \u2705 \u274c \u2705 Kotlin: Control flow statements Code block trim \u2713\u2713 \u2705 \u2713\u2713\u2713\u2713 \u2705 Google: Nonempty blocks Comment spaces \u2713 \u2705 \u2713 \u2713 Android: Horizontal whitespace Comment trim \u2705 \u2705 \u2717 \u2705 Clean comment Duplicate blank line \u2713 \u2717 \u2717 \u2717 Google: Vertical whitespace Duplicate blank line in block comment \u2705 \u2705 \u2713 \u2705 Clean comment Duplicate blank line in comment \u2705 \u2705 \u2717 \u2705 Clean comment Member separator \u2713 \u2713 \u274c \u2713 Vertical whitespace Unexpected blank line before package \u2713 \u2705 \u2713 \u2705 Google: Source file structure"},{"location":"compatibility_table/#stating-rules","title":"Stating rules","text":"Rule Kotlin Java Groovy Python Rationale Illegal catch \u2713 \u2713\u2713\u2713 \u2713 Oracle: Throwing exceptions Illegal throw \u2705 \u2713 \u2713\u2713\u2713 \u2713 Throwing exceptions Missing braces \u2713\u2713 \u2713 \u2713\u2713\u2713 Android: Braces Nested if-else \u2705 \u2705 \u2705 \u2705 JetBrains: Invert if statement Redundant default \u2705 \u2705 \u2705 \u2705 JetBrains: Redundant else keyword Redundant else \u2705 \u2705 \u2705 \u2713\u2713 Redundant else keyword Unnecessary switch \u2705 \u2705 \u2705 \u2705 JetBrains: Minimum switch branches"},{"location":"compatibility_table/#wrapping-rules","title":"Wrapping rules","text":"Rule Kotlin Java Groovy Python Rationale Assignment wrap \u2713 \u2705 \u2705 \u274c Google: Where to break Block comment unwrap \u2705 \u274c \u274c \u274c Kotlin: Documentation comments Chain call wrap \u2713 \u2705 \u274c \u274c Kotlin: Wrap chained calls Elvis wrap \u2705 Common: Trailing elvis Empty code block unwrap \u2705 \u2713 \u274c Google: Empty blocks Infix call wrap \u2705 Android: Where to break Lambda wrap \u2705 \u274c \u274c Where to break Operator wrap \u2713 \u2713 \u2705 \u274c Where to break Parameter wrap \u2713\u2713 \u2705 \u2705 \u2705 Kotlin: Class headers Statement wrap \u2713 \u2713 \u2705 \u2713 Oracle: Simple statements"},{"location":"rationales/","title":"Rationale details","text":""},{"location":"rationales/#abstraction-not-needed","title":"Abstraction not needed","text":"<p>Abstract modifier in a class is unnecessary if the class has no abstract methods.</p> <pre><code>abstract class Message {\n    fun send() {\n        // implementation\n    }\n}\n</code></pre>"},{"location":"rationales/#business-logic-first","title":"Business logic first","text":"<p>Built-in methods like <code>toString</code>, <code>hashCode</code> and <code>equals</code> are often placed at the end of the class. They are unrelated to the rest of the class and can be distracting when reading the source code.</p> <pre><code>class User(val firstName: String, val lastName: String) {\n    var isAdmin: Boolean = false\n\n    override fun toString(): String = \"$lastName, $firstName\"\n\n    override fun hashCode(): Int = Objects.hash(firstName, lastName)\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Robot) return false\n        return firstName == other.firstName &amp;&amp; lastName == other.lastName\n    }\n\n    fun promote() {\n        isAdmin = true\n    }\n}\n</code></pre>"},{"location":"rationales/#clean-comment","title":"Clean comment","text":"<p>Comment and block comment bodies should not have leading or trailing blank lines. No consecutive blank lines are allowed in the comment body.</p> <pre><code>/**\n *\n * The main function.\n *\n */\nfun main() {\n    // initialize the logger\n    //\n    //\n    // and print the starting message\n    val logger = Logger()\n    logger.info(\"Starting the application\")\n}\n</code></pre>"},{"location":"rationales/#imports-not-optimized","title":"Imports not optimized","text":"<p>Ommit imports that are not used in the file.</p> <pre><code>import java.lang.String\n\nval names = arrayListOf&lt;String&gt;()\n</code></pre>"},{"location":"rationales/#purposeful-name","title":"Purposeful name","text":"<p>When declaring string and primitive variables, it is tempting to use simple names based on their type. In fact, they are usually recommendations given by the IDE. But these names are not descriptive and hard to understand what their purpose is.</p> <pre><code>val string = \"Alice\"\n\nval int = 30\n</code></pre>"},{"location":"rationales/#trailing-elvis","title":"Trailing elvis","text":"<p>In a multiline statement, the elvis operator should align with chained method calls instead of the same column.</p> <pre><code>val bananas =\n    fruits\n        .filter { it.type == BANANA }\n        .takeUnless { it.isEmpty() } ?: return\n</code></pre>"},{"location":"rules/","title":"Rule details","text":""},{"location":"rules/#block-tag-punctuation","title":"Block tag punctuation","text":"<p>Description of certain block tags, if present, should end with a period, question mark or exclamation mark.</p> <p>Before</p> KotlinJavaGroovy <pre><code>/**\n * @param num\n * @return the new size of the group\n */\nabstract fun add(int num): Int\n</code></pre> <pre><code>/**\n * @param num\n * @return the new size of the group\n */\nabstract int add(int num);\n</code></pre> <pre><code>/**\n * @param num\n * @return the new size of the group\n */\nabstract def add(int num)\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>/**\n * @param num\n * @return the new size of the group.\n */\nabstract fun add(int num): Int\n</code></pre> <pre><code>/**\n * @param num\n * @return the new size of the group.\n */\nabstract int add(int num);\n</code></pre> <pre><code>/**\n * @param num\n * @return the new size of the group.\n */\nabstract int add(int num)\n</code></pre> <p> Configurations <ul> <li> <p>Ktlint</p> Key Default value <code>rulebook_punctuate_block_tags</code> @constructor, @receiver, @property, @param, @return </li> <li> <p>Checkstyle</p> Key Default value <code>BlockTagPunctuation#tags</code> @param, @return </li> </ul>"},{"location":"rules/#built-in-types","title":"Built-in types","text":"<p>Do not use types from <code>java.*</code> when there are Kotlin equivalents.</p> <p>Before</p> Kotlin <pre><code>import java.lang.String\n\nval names = arrayListOf&lt;String&gt;()\n</code></pre> <p>After</p> Kotlin <pre><code>val names = arrayListOf&lt;String&gt;()\n</code></pre>"},{"location":"rules/#confusing-predicate","title":"Confusing predicate","text":"<p>Use the positive form in a predicate call when it is a single expression and the calling function can be inverted.</p> <p>Before</p> Kotlin <pre><code>person.takeIf { it.name != null }\n</code></pre> <p>After</p> Kotlin <pre><code>person.takeUnless { it.name == null }\n</code></pre>"},{"location":"rules/#explicit-import","title":"Explicit import","text":"<p>Import directives must be single-type instead of wildcard imports.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>import com.example.fruit.*\n\nval fruits = listOf(Apple(), Banana())\n</code></pre> <pre><code>import com.example.fruit.*;\n\nList&lt;Fruit&gt; fruits = Arrays.asList(new Apple(), new Banana());\n</code></pre> <pre><code>import com.example.fruit.*\n\nArrayList&lt;Fruit&gt; fruits = [new Apple(), new Banana()]\n</code></pre> <pre><code>from fruit import *\n\nfruits = [Apple(), Banana()]\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>import com.example.fruit.Apple\nimport com.example.fruit.Banana\n\nval fruits = listOf(Apple(), Banana())\n</code></pre> <pre><code>import com.example.fruit.Apple;\nimport com.example.fruit.Banana;\n\nList&lt;Fruit&gt; fruits = Arrays.asList(new Apple(), new Banana());\n</code></pre> <pre><code>import com.example.fruit.Apple\nimport com.example.fruit.Banana\n\nArrayList&lt;Fruit&gt; fruits = [new Apple(), new Banana()]\n</code></pre> <pre><code>from fruit import Apple, Banana\n\nfruits = [Apple(), Banana()]\n</code></pre>"},{"location":"rules/#file-size","title":"File size","text":"<p>File length should not be longer than 1.000 lines of code. If a file exceeds the limit, it should be split into multiple files.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>object Articles {\n    fun create(article: Article): Int { /*...*/ }\n\n    fun read(articleId: Int): Article { /*...*/ }\n\n    fun update(articleId: Int, article: Article) { /*...*/ }\n\n    fun delete(articleId: Int) { /*...*/ }\n}\n</code></pre> <pre><code>final class Articles {\n    static int create(Article article) { /*...*/ }\n\n    static Article read(int articleId) { /*...*/ }\n\n    static void update(int articleId, Article article) { /*...*/ }\n\n    static void delete(int articleId) { /*...*/ }\n}\n</code></pre> <pre><code>final class Articles {\n    static def create(Article article) { /*...*/ }\n\n    static def read(int articleId) { /*...*/ }\n\n    static def update(int articleId, Article article) { /*...*/ }\n\n    static def delete(int articleId) { /*...*/ }\n}\n</code></pre> <pre><code>def create_article(article: Article) -&gt; int:\n    // ...\n\ndef read_article(article_id: int) -&gt; Article:\n    // ...\n\ndef update_article(article_id: int, article: Article):\n    // ...\n\ndef delete_article(article_id: int):\n    // ...\n</code></pre> <p>After</p> KotlinJavaGroovyPython <p><pre><code>fun Articles.create(article: Article): Int { /*...*/ }\n</code></pre> <pre><code>fun Articles.read(articleId: Int): Article { /*...*/ }\n</code></pre> <pre><code>fun Articles.update(articleId: Int, article: Article) { /*...*/ }\n</code></pre> <pre><code>fun Articles.delete(articleId: Int) { /*...*/ }\n</code></pre></p> <p><pre><code>final class ArticleCreator {\n    static int create(Article article) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleReader {\n    static Article read(int articleId) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleUpdater {\n    static void update(int articleId, Article article) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleDeleter {\n    static void delete(int articleId) { /*...*/ }\n}\n</code></pre></p> <p><pre><code>final class ArticleCreator {\n    static def create(Article article) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleReader {\n    static def read(int articleId) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleUpdater {\n    static def update(int articleId, Article article) { /*...*/ }\n}\n</code></pre> <pre><code>final class ArticleDeleter {\n    static def delete(int articleId) { /*...*/ }\n}\n</code></pre></p> <p><pre><code>def create_article(article: Article) -&gt; int:\n    // ...\n</code></pre> <pre><code>def read_article(article_id: int) -&gt; Article:\n    // ...\n</code></pre> <pre><code>def update_article(article_id: int, article: Article):\n    // ...\n</code></pre> <pre><code>def delete_article(article_id: int):\n    // ...\n</code></pre></p> <p> Configurations <ul> <li> <p>Ktlint</p> Key Default value <code>rulebook_max_file_size</code> 1.000 </li> <li> <p>Checkstyle</p> Key Default value <code>FileLength#max</code> 1.000 </li> <li> <p>CodeNarc</p> Key Default value <code>ClassSize#maxLines</code> 1.000 </li> <li> <p>Pylint</p> Key Default value <code>rulebook-max-file-size</code> 1.000 </li> </ul>"},{"location":"rules/#null-equality","title":"Null equality","text":"<p>Use structural equality instead of referential equality when comparing objects with <code>null</code>.</p> <p>Before</p> Kotlin <pre><code>user.takeUnless { it.name === null }\n</code></pre> <p>After</p> Kotlin <pre><code>user.takeUnless { it.name == null }\n</code></pre>"},{"location":"rules/#redundant-qualifier","title":"Redundant qualifier","text":"<p>Strip fully qualified names when they are already imported.</p> <p>Before</p> JavaGroovy <pre><code>import java.io.FileInputStream;\n\nvoid read(java.io.FileInputStream stream) {}\n</code></pre> <pre><code>import java.io.FileInputStream\n\ndef read(java.io.FileInputStream stream) {}\n</code></pre> <p>After</p> JavaGroovy <pre><code>import java.io.FileInputStream;\n\nvoid read(FileInputStream stream) {}\n</code></pre> <pre><code>import java.io.FileInputStream\n\ndef read(FileInputStream stream) {}\n</code></pre>"},{"location":"rules/#todo-comment","title":"TODO comment","text":"<p>TODO comment keywords should be uppercase and followed by exactly one space.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>// todo add tests\n\n// FIXME: memory leak\n</code></pre> <pre><code>// todo add tests\n\n// FIXME: memory leak\n</code></pre> <pre><code>// todo add tests\n\n// FIXME: memory leak\n</code></pre> <pre><code># todo add tests\n\n# FIXME: memory leak\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>// TODO add tests\n\n// FIXME memory leak\n</code></pre> <pre><code>// TODO add tests\n\n// FIXME memory leak\n</code></pre> <pre><code>// TODO add tests\n\n// FIXME memory leak\n</code></pre> <pre><code># TODO add tests\n\n# FIXME memory leak\n</code></pre>"},{"location":"rules/#trailing-comma-in-collection","title":"Trailing comma in collection","text":"<p>Put a trailing comma in a multiline collection site, omit when it is a single line. In Java and Groovy, this rule applies to array initializers. In Python, this rule applies to tuples.</p> <p>Before</p> JavaGroovyPython <pre><code>String[] games = {\"chess\", \"checkers\",};\n\nint[][] ticTacToe = {\n    {0, 0, 0,},\n    {0, 0, 0,},\n    {0, 0, 0,}\n};\n</code></pre> <pre><code>var games = ['chess', 'checkers',]\n\nvar ticTacToe = [\n    [0, 0, 0,],\n    [0, 0, 0,],\n    [0, 0, 0,]\n]\n</code></pre> <pre><code>games = ('chess', 'checkers',)\n\ntic_tac_toe = (\n    (0, 0, 0,),\n    (0, 0, 0,),\n    (0, 0, 0,)\n)\n</code></pre> <p>After</p> JavaGroovyPython <pre><code>String[] games = {\"chess\", \"checkers\"};\n\nint[][] ticTacToe = {\n    {0, 0, 0},\n    {0, 0, 0},\n    {0, 0, 0},\n};\n</code></pre> <pre><code>var games = ['chess', 'checkers']\n\nvar ticTacToe = [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n]\n</code></pre> <pre><code>games = ('chess', 'checkers')\n\ntic_tac_toe = (\n    (0, 0, 0),\n    (0, 0, 0),\n    (0, 0, 0),\n)\n</code></pre>"},{"location":"rules/#trailing-comma-in-declaration","title":"Trailing comma in declaration","text":"<p>Put a trailing comma in a multiline declaration site, omit when it is a single line.</p> <p>Before</p> KotlinGroovyPython <pre><code>val inventory =\n    mapOf(\n        \"milks\" to 2,\n        \"eggs\" to 6\n    )\n\nprintln(inventory,)\n</code></pre> <pre><code>def inventory = [\n    'milks': 2,\n    'eggs': 6\n]\n\nprintln(inventory,)\n</code></pre> <pre><code>inventory = {\n    'milks': 2,\n    'eggs': 6\n}\n\nprint(inventory,)\n</code></pre> <p>After</p> KotlinGroovyPython <pre><code>val inventory =\n    mapOf(\n        \"milks\" to 2,\n        \"eggs\" to 6,\n    )\n\nprintln(inventory)\n</code></pre> <pre><code>def inventory = [\n    'milks': 2,\n    'eggs': 6,\n]\n\nprintln(inventory)\n</code></pre> <pre><code>inventory = {\n    'milks': 2,\n    'eggs': 6,\n}\n\nprint(inventory)\n</code></pre>"},{"location":"rules/#trailing-comma-in-definition","title":"Trailing comma in definition","text":"<p>Put a trailing comma in a multiline definition site, omit when it is a single line.</p> <p>Before</p> KotlinPython <pre><code>fun updateInventory(item: String,) = TODO()\n\nfun createInventory(\n    item: String,\n    quantity: Int\n) = TODO()\n</code></pre> <pre><code>def update_inventory(item: str,):\n    pass\n\n\ndef create_inventory(\n    item: str,\n    quantity: int\n):\n    pass\n</code></pre> <p>After</p> KotlinPython <pre><code>fun updateInventory(item: String) = TODO()\n\nfun createInventory(\n    item: String,\n    quantity: Int,\n)\n</code></pre> <pre><code>def update_inventory(item: str):\n    pass\n\n\ndef create_inventory(\n    item: str,\n    quantity: int,\n)\n</code></pre>"},{"location":"rules/#unused-import","title":"Unused import","text":"<p>Remove unused import statements.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>import com.example.fruit.Apple\nimport com.example.fruit.Banana\n\nval apple = Apple()\n</code></pre> <pre><code>import com.example.fruit.Apple;\nimport com.example.fruit.Banana;\n\nApple apple = new Apple();\n</code></pre> <pre><code>import com.example.fruit.Apple\nimport com.example.fruit.Banana\n\nvar apple = new Apple()\n</code></pre> <pre><code>from fruit import Apple, Banana\n\napple = Apple()\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>import com.example.fruit.Apple\n\nval apple = Apple()\n</code></pre> <pre><code>import com.example.fruit.Apple;\n\nApple apple = new Apple();\n</code></pre> <pre><code>import com.example.fruit.Apple\n\nvar apple = new Apple()\n</code></pre> <pre><code>from fruit import Apple\n\napple = Apple()\n</code></pre>"},{"location":"rules/#declaring","title":"Declaring","text":""},{"location":"rules/#number-suffix-for-double","title":"Number suffix for double","text":"<p>Double floating point literals should be suffixed with lowercase <code>d</code>, which is more readable than <code>D</code>.</p> <p>Before</p> JavaGroovy <pre><code>double quarter = 0.25D;\n</code></pre> <pre><code>var quarter = 0.25D\n</code></pre> <p>After</p> JavaGroovy <pre><code>double quarter = 0.25d;\n</code></pre> <pre><code>var quarter = 0.25d\n</code></pre>"},{"location":"rules/#number-suffix-for-float","title":"Number suffix for float","text":"<p>Floating point literals should be suffixed with lowercase <code>f</code>, which is more readable than <code>F</code>.</p> <p>Before</p> KotlinJavaGroovy <pre><code>val half = 0.5F\n</code></pre> <pre><code>float half = 0.5F;\n</code></pre> <pre><code>var quarter = 0.25F\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>val half = 0.5f\n</code></pre> <pre><code>float half = 0.5f;\n</code></pre> <pre><code>var quarter = 0.25f\n</code></pre>"},{"location":"rules/#number-suffix-for-integer","title":"Number suffix for integer","text":"<p>Integer literals should be suffixed with lowercase <code>i</code>, which is more readable than <code>I</code>.</p> <p>Before</p> Groovy <pre><code>var ten = 10I\n</code></pre> <p>After</p> Groovy <pre><code>var ten = 10i\n</code></pre>"},{"location":"rules/#number-suffix-for-long","title":"Number suffix for long","text":"<p>Long integer literals should be suffixed with uppercase <code>L</code>.</p> <p>Before</p> JavaGroovy <pre><code>long tenMillion = 10_000_000l;\n</code></pre> <pre><code>var tenMillion = 10_000_000l\n</code></pre> <p>After</p> JavaGroovy <pre><code>long tenMillion = 10_000_000L;\n</code></pre> <pre><code>var tenMillion = 10_000_000L\n</code></pre>"},{"location":"rules/#string-quotes","title":"String quotes","text":"<p>Use single quotes for string literals, unless the string contains single quotes.</p> <p>Before</p> GroovyPython <pre><code>var name = \"John Doe\"\n\nprintln('G\\'day, ' + name)\n</code></pre> <pre><code>name = \"John Doe\"\n\nprint('G\\'day, ' + name)\n</code></pre> <p>After</p> GroovyPython <pre><code>var name = 'John Doe'\n\nprintln(\"G'day, \" + name)\n</code></pre> <pre><code>name = 'John Doe'\n\nprint(\"G'day, \" + name)\n</code></pre>"},{"location":"rules/#defining","title":"Defining","text":""},{"location":"rules/#abstract-class-definition","title":"Abstract class definition","text":"<p>Abstract classes need at least one abstract function.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>abstract class Vehicle {\n    fun start() {}\n}\n</code></pre> <pre><code>abstract class Vehicle {\n    void start() {}\n}\n</code></pre> <pre><code>abstract class Vehicle {\n    def start() {}\n}\n</code></pre> <pre><code>from abc import ABC\n\nclass Vehicle(ABC):\n    def start(self):\n        pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>abstract class Vehicle {\n    abstract fun start()\n}\n</code></pre> <pre><code>abstract class Vehicle {\n    abstract void start();\n}\n</code></pre> <pre><code>abstract class Vehicle {\n    abstract def start()\n}\n</code></pre> <pre><code>from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n</code></pre>"},{"location":"rules/#contract-function-definition","title":"Contract function definition","text":"<p>Kotlin contract functions that carry a runnable parameter should have <code>inline</code> modifier. Without the modifier, user cannot assign a global variable within the code block.</p> <p>Before</p> Kotlin <pre><code>fun action(block: () -&gt; Unit) {\n    contract { callsInPlace(block, EXACTLY_ONCE) }\n    block()\n}\n</code></pre> <p>After</p> Kotlin <pre><code>inline fun action(block: () -&gt; Unit) {\n    contract { callsInPlace(block, EXACTLY_ONCE) }\n    block()\n}\n</code></pre>"},{"location":"rules/#exception-inheritance","title":"Exception inheritance","text":"<p>Use <code>Exception</code> as superclass of custom exceptions. Most applications should not extend <code>Error</code> or <code>Throwable</code>.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class PurchaseException : Error()\n</code></pre> <pre><code>class PurchaseException extends Error {}\n</code></pre> <pre><code>class PurchaseException extends Error {}\n</code></pre> <pre><code>class PurchaseException(BaseException):\n    pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class PurchaseException : Exception()\n</code></pre> <pre><code>class PurchaseException extends Exception {}\n</code></pre> <pre><code>class PurchaseException extends Exception {}\n</code></pre> <pre><code>class PurchaseException(Exception):\n    pass\n</code></pre>"},{"location":"rules/#utility-class-definition","title":"Utility class definition","text":"<p>Utility classes should have a final modifier and a private constructor to prevent instantiation.</p> <p>Before</p> JavaGroovy <pre><code>class Lists {\n    static List&lt;String&gt; of(String... elements) {\n        return Arrays.asList(elements);\n    }\n}\n</code></pre> <pre><code>class Lists {\n    static List&lt;String&gt; of(String... elements) {\n        return Arrays.asList(elements)\n    }\n}\n</code></pre> <p>After</p> JavaGroovy <pre><code>final class Lists {\n    private Lists() {}\n\n    static List&lt;String&gt; of(String... elements) {\n        return Arrays.asList(elements);\n    }\n}\n</code></pre> <pre><code>final class Lists {\n    private Lists() {}\n\n    static List&lt;String&gt; of(String... elements) {\n        return Arrays.asList(elements)\n    }\n}\n</code></pre>"},{"location":"rules/#naming","title":"Naming","text":""},{"location":"rules/#class-name-acronym","title":"Class name acronym","text":"<p>Ensures that the first letter of acronyms longer than three characters are always capitalized.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class RestAPI {\n    val httpURL = \"https://example.com\"\n}\n</code></pre> <pre><code>class RestAPI {\n    String httpURL = \"https://example.com\";\n}\n</code></pre> <pre><code>class RestAPI {\n    var httpURL = 'https://example.com'\n}\n</code></pre> <pre><code>class RestAPI:\n    http_url = 'https://example.com'\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class RestApi {\n    val httpUrl = \"https://example.com\"\n}\n</code></pre> <pre><code>class RestApi {\n    String httpUrl = \"https://example.com\";\n}\n</code></pre> <pre><code>class RestApi {\n    var httpUrl = 'https://example.com'\n}\n</code></pre> <pre><code>class RestApi:\n    http_url = 'https://example.com'\n</code></pre>"},{"location":"rules/#class-name","title":"Class name","text":"<p>Class, interface and object names are written in <code>PascalCase</code>.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class train_station\n</code></pre> <pre><code>class train_station {}\n</code></pre> <pre><code>class train_station {}\n</code></pre> <pre><code>class train_station:\n    pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class TrainStation\n</code></pre> <pre><code>class TrainStation {}\n</code></pre> <pre><code>class TrainStation {}\n</code></pre> <pre><code>class TrainStation:\n    pass\n</code></pre>"},{"location":"rules/#constant-property-name","title":"Constant property name","text":"<p>Constant fields should be written in <code>SCREAMING_SNAKE_CASE</code>.</p> <p>Before</p> KotlinJavaGroovy <pre><code>const val maxValue = 99\n</code></pre> <pre><code>static final int maxValue = 99;\n</code></pre> <pre><code>static final int maxValue = 99\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>const val MAX_VALUE = 99\n</code></pre> <pre><code>static final int MAX_VALUE = 99;\n</code></pre> <pre><code>static final int MAX_VALUE = 99\n</code></pre>"},{"location":"rules/#file-name","title":"File name","text":"<p>If the file contains a single class, the file name should be the same as the root class name.</p> <p>Before</p> KotlinJavaGroovy <pre><code>\u2514 com.example\n  \u2514 UserObject.kt\n    \u2514 class User\n</code></pre> <pre><code>\u2514 com.example\n  \u2514 UserObject.java\n    \u2514 class User {}\n</code></pre> <pre><code>\u2514 com.example\n  \u2514 UserObject.groovy\n    \u2514 class User {}\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>\u2514 com.example\n  \u2514 User.kt\n    \u2514 class User\n</code></pre> <pre><code>\u2514 com.example\n  \u2514 User.java\n    \u2514 class User {}\n</code></pre> <pre><code>\u2514 com.example\n  \u2514 User.groovy\n    \u2514 class User {}\n</code></pre>"},{"location":"rules/#identifier-name","title":"Identifier name","text":"<p>Non-constant fields, functions and parameters should be written in camelCase.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun DebugUser(User: User) {\n    logger.debug(User)\n}\n</code></pre> <pre><code>void DebugUser(User User) {\n    logger.debug(User);\n}\n</code></pre> <pre><code>def DebugUser(User User) {\n    logger.debug(User)\n}\n</code></pre> <pre><code>def DebugUser(User):\n    logger.debug(User)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun debugUser(user: User) {\n    logger.debug(user)\n}\n</code></pre> <pre><code>void debugUser(User user) {\n    logger.debug(user);\n}\n</code></pre> <pre><code>def debugUser(User user) {\n    logger.debug(user)\n}\n</code></pre> <pre><code>def debug_user(user):\n    logger.debug(user)\n</code></pre>"},{"location":"rules/#illegal-class-final-name","title":"Illegal class final name","text":"<p>Prohibits meaningless source names in class, interface, object and files. The name of utility classes (or files) should be the plural form of the extended class.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>interface AbstractRocket\n\nclass SpaceshipWrapper : AbstractRocket\n</code></pre> <pre><code>interface AbstractRocket {}\n\nclass SpaceshipWrapper implements AbstractRocket {}\n</code></pre> <pre><code>interface AbstractRocket {}\n\nclass SpaceshipWrapper implements AbstractRocket {}\n</code></pre> <pre><code>class AbstractRocket:\n    pass\n\n\nclass SpaceshipWrapper(AbstractRocket):\n    pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>interface Rocket\n\nclass Spaceship : Rocket\n</code></pre> <pre><code>interface Rocket {}\n\nclass Spaceship implements Rocket {}\n</code></pre> <pre><code>interface Rocket {}\n\nclass Spaceship implements Rocket {}\n</code></pre> <pre><code>class Rocket:\n    pass\n\n\nclass Spaceship(Rocket):\n    pass\n</code></pre> <p> Configurations <ul> <li> <p>Ktlint</p> Key Default value <code>rulebook_illegal_class_final_names</code> Util, Utility, Helper, Manager, Wrapper </li> <li> <p>Checkstyle</p> Key Default value <code>IllegalClassFinalName#names</code> Util, Utility, Helper, Manager, Wrapper </li> <li> <p>CodeNarc</p> Key Default value <code>IllegalClassFinalName#names</code> Util, Utility, Helper, Manager, Wrapper </li> <li> <p>Pylint</p> Key Default value <code>rulebook-illegal-class-final-names</code> Util, Utility, Helper, Manager, Wrapper </li> </ul>"},{"location":"rules/#illegal-variable-name","title":"Illegal variable name","text":"<p>Prohibitprimitive type names, base <code>Object</code> type names and their plural forms as identifiers of properties, parameters and local variables. The name of the identifier should be descriptive and meaningful.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>val string: String\n\nval list: List&lt;Person&gt;\n</code></pre> <pre><code>String string;\n\nList&lt;Person&gt; list;\n</code></pre> <pre><code>var string\n\nvar list\n</code></pre> <pre><code>string: str\n\nlist: list[Person]\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>val name: String\n\nval people: List&lt;Person&gt;\n</code></pre> <pre><code>String name;\n\nList&lt;Person&gt; people;\n</code></pre> <pre><code>var name\n\nvar people\n</code></pre> <pre><code>name: str\n\npeople: list[Person]\n</code></pre> <p> Configurations <ul> <li> <p>Ktlint</p> Key Default value <code>rulebook_illegal_variable_names</code> any, boolean, byte, char, double, float, int, long, short, string, many, booleans, bytes, chars, doubles, floats, ints, longs, shorts </li> <li> <p>Checkstyle</p> Key Default value <code>IllegalIdentifierName#format</code> object, integer, string, objects, integers, strings </li> <li> <p>CodeNarc</p> Key Default value <code>IllegalVariableName#names</code> object, integer, string, object, integers, strings </li> <li> <p>Pylint</p> Key Default value <code>bad-names</code> objs, ints, strs </li> </ul>"},{"location":"rules/#package-name","title":"Package name","text":"<p>Package names should be written in lowercase with no separators.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>package com.example.user_management\n</code></pre> <pre><code>package com.example.user_management;\n</code></pre> <pre><code>package com.example.user_management\n</code></pre> <pre><code>\u2514 user_management\n  \u2514 UserConfig.py\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>package com.example.usermanagement\n</code></pre> <pre><code>package com.example.usermanagement;\n</code></pre> <pre><code>package com.example.usermanagement\n</code></pre> <pre><code>\u2514 user_management\n  \u2514 user_config.py\n</code></pre>"},{"location":"rules/#property-name-interop","title":"Property name interop","text":"<p>Kotlin field definitions that are Boolean types should be prefixed with <code>is</code>. Otherwise, the compiler will generate a getter method with <code>get</code> prefix.</p> <p>Before</p> Kotlin <p><pre><code>val active: Boolean\n</code></pre> <pre><code>boolean getActive() {}\n</code></pre></p> <p>After</p> Kotlin <p><pre><code>val isActive: Boolean\n</code></pre> <pre><code>boolean isActive() {}\n</code></pre></p>"},{"location":"rules/#required-generic-name","title":"Required generic name","text":"<p>Only use common generic type names according to Oracle. Multiple generic types declaration is ignored.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class Box&lt;A&gt;() {}\n\nfun &lt;X&gt; rotate(box: Box&lt;X&gt;) {}\n</code></pre> <pre><code>class Box&lt;A&gt; {}\n\nvoid &lt;X&gt; rotate(Box&lt;X&gt; box) {}\n</code></pre> <pre><code>class Box&lt;A&gt; {}\n\nvoid &lt;X&gt; rotate(Box&lt;X&gt; box) {}\n</code></pre> <pre><code>from typing import TypeVar\n\nA = TypeVar('A')\nX = TypeVar('X')\n\n\nclass Box(A):\n    pass\n\n\ndef rotate(box: Box[X]):\n    pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class Box&lt;E&gt;() {}\n\nfun &lt;T&gt; rotate(box: Box&lt;T&gt;) {}\n</code></pre> <pre><code>class Box&lt;E&gt; {}\n\nvoid &lt;T&gt; rotate(Box&lt;T&gt; box) {}\n</code></pre> <pre><code>class Box&lt;E&gt; {}\n\nvoid &lt;T&gt; rotate(Box&lt;T&gt; box) {}\n</code></pre> <pre><code>from typing import TypeVar\n\nE = TypeVar('E')\nT = TypeVar('T')\n\n\nclass Box(E):\n    pass\n\n\ndef rotate(box: Box[T]):\n    pass\n</code></pre> <p> Configurations <ul> <li> <p>Ktlint</p> Key Default value <code>rulebook_required_generic_names</code> E, K, N, T, V </li> <li> <p>Checkstyle</p> Key Default value <code>ClassTypeParameterName#format</code><code>InterfaceTypeParameterName#format</code><code>MethodTypeParameterName#format</code><code>RecordTypeParameterName#format</code> E, K, N, T, V </li> <li> <p>CodeNarc</p> Key Default value <code>RequiredGenericName#names</code> E, K, N, T, V </li> <li> <p>Pylint</p> Key Default value <code>rulebook-required-generic-names</code> E, K, N, T, V </li> </ul>"},{"location":"rules/#ordering","title":"Ordering","text":""},{"location":"rules/#block-tag-order","title":"Block tag order","text":"<p>Block tags should be ordered in the following sequence: <code>@constructor</code>, <code>@receiver</code>, <code>@param</code>, <code>@property</code>, <code>@return</code>, <code>@throws</code>, <code>@see</code>.</p> <p>Before</p> KotlinJavaGroovy <pre><code>/**\n * @see User\n * @return The user object.\n * @param name The name of the user.\n */\nabstract fun createUser(name: String): User\n</code></pre> <pre><code>/**\n * @see User\n * @return The user object.\n * @param name The name of the user.\n */\nabstract User createUser(String name);\n</code></pre> <pre><code>/**\n * @see User\n * @return The user object.\n * @param name The name of the user.\n */\nabstract def createUser(String name)\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>/**\n * @param name The name of the user.\n * @return The user object.\n * @see User\n */\nabstract fun createUser(name: String): User\n</code></pre> <pre><code>/**\n * @param name The name of the user.\n * @return The user object.\n * @see User\n */\nabstract User createUser(String name);\n</code></pre> <pre><code>/**\n * @param name The name of the user.\n * @return The user object.\n * @see User\n */\nabstract def createUser(String name)\n</code></pre>"},{"location":"rules/#built-in-function-position","title":"Built-in function position","text":"<p>Place Object built-in methods such as <code>toString()</code>, <code>hashCode()</code> and <code>equals()</code> at the end of the class.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class Notification(val message: String) {\n    override fun toString(): String = \"$id: $message\"\n\n    val id: Int = randomize()\n}\n</code></pre> <pre><code>class Notification {\n    @Override\n    public String toString() {\n        return String.format(\"%d: %s\", id, message);\n    }\n\n    final String message;\n    final int id;\n\n    Notification(String message) {\n        this.message = message;\n        this.id = randomize();\n    }\n}\n</code></pre> <pre><code>class Notification {\n    String toString() {\n        return \"${id}: ${message}\"\n    }\n\n    final String message\n    final int id\n\n    Notification(String message) {\n        this.message = message\n        this.id = randomize()\n    }\n}\n</code></pre> <pre><code>class Notification:\n    def __str__(self):\n        return f'{self.id}: {self.message}'\n\n    def __init__(self, message):\n        self.message = message\n        self.id = randomize()\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class Notification(val message: String) {\n    val id: Int = randomize()\n\n    override fun toString(): String = \"$id: $message\"\n}\n</code></pre> <pre><code>class Notification {\n    final String message;\n    final int id;\n\n    Notification(String message) {\n        this.message = message;\n        this.id = randomize();\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"%d: %s\", id, message);\n    }\n}\n</code></pre> <pre><code>class Notification {\n    final String message\n    final int id\n\n    Notification(String message) {\n        this.message = message\n        this.id = randomize()\n    }\n\n    String toString() {\n        return \"${id}: ${message}\"\n    }\n}\n</code></pre> <pre><code>class Notification:\n    def __init__(self, message):\n        self.message = message\n        self.id = randomize()\n\n    def __str__(self):\n        return f'{self.id}: {self.message}'\n</code></pre>"},{"location":"rules/#import-order","title":"Import order","text":"<p>Import directives should be ordered alphabetically without any blank lines.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>import java.util.List\n\nimport com.example.User\n</code></pre> <pre><code>import java.util.List;\n\nimport com.example.User;\n</code></pre> <pre><code>import java.util.List\n\nimport com.example.User\n</code></pre> <pre><code>import utils\n\nimport user\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>import com.example.User\nimport java.util.List\n</code></pre> <pre><code>import com.example.User;\nimport java.util.List;\n</code></pre> <pre><code>import com.example.User\nimport java.util.List\n</code></pre> <pre><code>import user\nimport utils\n</code></pre>"},{"location":"rules/#inner-class-position","title":"Inner class position","text":"<p>Place inner classes at the end of the class.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class Article(content: String, author: Author) {\n    class Author(name: String)\n\n    constructor(content: String) : this(content, null)\n}\n</code></pre> <pre><code>class Article {\n    class Author {}\n\n    Article(String content, Author author) {}\n\n    Article(String content) {}\n}\n</code></pre> <pre><code>class Article {\n    class Author {}\n\n    Article(String content, Author author) {}\n\n    Article(String content) {}\n}\n</code></pre> <pre><code>class Article:\n    class Author:\n        pass\n\n    def __init__(self, content, author = None):\n        pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class Article(content: String, author: Author) {\n    constructor(content: String) : this(content, null)\n\n    class Author(name: String)\n}\n</code></pre> <pre><code>class Article {\n    Article(String content, Author author) {}\n\n    Article(String content) {}\n\n    class Author {}\n}\n</code></pre> <pre><code>class Article {\n    Article(String content, Author author) {}\n\n    Article(String content) {}\n\n    class Author {}\n}\n</code></pre> <pre><code>class Article:\n    def __init__(self, content, author = None):\n        pass\n\n    class Author:\n        pass\n</code></pre>"},{"location":"rules/#member-order","title":"Member order","text":"<p>The class should be organized as follows: properties, initializer block, constructors and methods.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>class Car(brand: String, model: String) {\n    init {\n        log(\"Car created\")\n    }\n\n    constructor(brand: String) : this(brand, \"Unknown\")\n\n    val wheels = 4\n\n    fun start() {\n        log(\"Car started\")\n    }\n}\n</code></pre> <pre><code>class Car {\n    Car(String brand, String model) {}\n\n    Car(String brand) {\n        this(brand, \"Unknown\");\n    }\n\n    int wheels = 4;\n\n    void start() {\n        log(\"Car created\");\n    }\n}\n</code></pre> <pre><code>class Car {\n    Car(String brand, String model) {}\n\n    Car(String brand) {\n        this(brand, 'Unknown')\n    }\n\n    var wheels = 4\n\n    def start() {\n        log('Car created')\n    }\n}\n</code></pre> <pre><code>class Car:\n    def __init__(self, brand, model = 'Unknown'):\n        pass\n\n    wheels = 4\n\n    def start(self):\n        pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>class Car(brand: String, model: String): Vehicle {\n    override val wheels = 4\n\n    init {\n        log(\"Car created\")\n    }\n\n    constructor(brand: String) : this(brand, \"Unknown\")\n\n    fun start() {\n        log(\"Car started\")\n    }\n}\n</code></pre> <pre><code>class Car implements Vehicle {\n    int wheels = 4;\n\n    Car(String brand, String model) {}\n\n    Car(String brand) {\n        this(brand, \"Unknown\");\n    }\n\n    void start() {\n        log(\"Car created\");\n    }\n}\n</code></pre> <pre><code>class Car implements Vehicle {\n    var wheels = 4\n\n    Car(String brand, String model) {}\n\n    Car(String brand) {\n        this(brand, 'Unknown')\n    }\n\n    def start() {\n        log('Car created')\n    }\n}\n</code></pre> <pre><code>class Car(Vehicle):\n    wheels = 4\n\n    def __init__(self, brand, model = 'Unknown'):\n        pass\n\n    def start(self):\n        pass\n</code></pre>"},{"location":"rules/#overload-function-position","title":"Overload function position","text":"<p>Place overloaded functions next to each other.</p> <p>After</p> KotlinJavaGroovy <pre><code>fun sum(a: Int, b: Int): Int = a + b\n\nfun times(a: Int, b: Int): Int = a * b\n\nfun sum(a: Int, b: Int, c: Int): Int = a + b + c\n</code></pre> <pre><code>int sum(int a, int b) {\n    return a + b;\n}\n\nint times(int a, int b) {\n    return a * b;\n}\n\nint sum(int a, int b, int c) {\n    return a + b + c;\n}\n</code></pre> <pre><code>def sum(int a, int b) {\n    return a + b\n}\n\ndef times(int a, int b) {\n    return a * b\n}\n\ndef sum(int a, int b, int c) {\n    return a + b + c\n}\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>fun sum(a: Int, b: Int): Int = a + b\n\nfun sum(a: Int, b: Int, c: Int): Int = a + b + c\n\nfun times(a: Int, b: Int): Int = a * b\n</code></pre> <pre><code>int sum(int a, int b) {\n    return a + b;\n}\n\nint sum(int a, int b, int c) {\n    return a + b + c;\n}\n\nint times(int a, int b) {\n    return a * b;\n}\n</code></pre> <pre><code>def sum(int a, int b) {\n    return a + b\n}\n\ndef sum(int a, int b, int c) {\n    return a + b + c\n}\n\ndef times(int a, int b) {\n    return a * b\n}\n</code></pre>"},{"location":"rules/#static-import-position","title":"Static import position","text":"<p>Static import directives are to be placed after normal imports, separated by a blank line.</p> <p>Before</p> JavaGroovy <pre><code>import static java.lang.Math.PI;\n\nimport java.util.List;\n</code></pre> <pre><code>import static java.lang.Math.PI\n\nimport java.util.List\n</code></pre> <p>After</p> JavaGroovy <pre><code>import java.util.List;\n\nimport static java.lang.Math.PI;\n</code></pre> <pre><code>import java.util.List\n\nimport static java.lang.Math.PI\n</code></pre>"},{"location":"rules/#spacing","title":"Spacing","text":""},{"location":"rules/#block-comment-spaces","title":"Block comment spaces","text":"<p>Ensures that block comments starts and ends with a whitespace. In multiline comments, each line after the asterisk should be indented by a whitespace.</p> <p>Before</p> KotlinJavaGroovy <pre><code>/**Pass on user behavior.*/\nfun report()\n</code></pre> <pre><code>/**Pass on user behavior.*/\nvoid report() {}\n</code></pre> <pre><code>/**Pass on user behavior.*/\ndef report() {}\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>/** Pass on user behavior. */\nfun report()\n</code></pre> <pre><code>/** Pass on user behavior. */\nvoid report() {}\n</code></pre> <pre><code>/** Pass on user behavior. */\ndef report() {}\n</code></pre>"},{"location":"rules/#block-comment-trim","title":"Block comment trim","text":"<p>Do not start or end block comments with whitespaces.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>/**\n *\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n *\n */\n</code></pre> <pre><code>/**\n *\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n *\n */\n</code></pre> <pre><code>/**\n *\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n *\n */\n</code></pre> <pre><code>\"\"\"\n\nAUTHOR: John Doe\nLICENSE: Apache 2.0\n\n\"\"\"\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>/**\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n */\n</code></pre> <pre><code>/**\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n */\n</code></pre> <pre><code>/**\n * AUTHOR: John Doe\n * LICENSE: Apache 2.0\n */\n</code></pre> <pre><code>\"\"\"\nAUTHOR: John Doe\nLICENSE: Apache 2.0\n\"\"\"\n</code></pre>"},{"location":"rules/#block-tag-indentation","title":"Block tag indentation","text":"<p>Multi-line block tag descriptions should be indented by four spaces, or five spaces from the leading asterisk.</p> <p>Before</p> KotlinJavaGroovy <pre><code>/**\n * @param num the number to return\n * the absolute value for.\n */\nfun abs(num: Int): Int\n</code></pre> <pre><code>/**\n * @param num the number to return\n * the absolute value for.\n */\nvoid abs(int num) {}\n</code></pre> <pre><code>/**\n * @param num the number to return\n * the absolute value for.\n */\ndef abs(int num) {}\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>/**\n * @param num the number to return\n *     the absolute value for.\n */\nfun abs(num: Int): Int\n</code></pre> <pre><code>/**\n * @param num the number to return\n *     the absolute value for.\n */\nvoid abs(int num) {}\n</code></pre> <pre><code>/**\n * @param num the number to return\n *     the absolute value for.\n */\ndef abs(int num) {}\n</code></pre>"},{"location":"rules/#block-tag-separator","title":"Block tag separator","text":"<p>Separate block tag group from the summary with a blank line.</p> <p>Before</p> KotlinJavaGroovy <pre><code>/**\n * Returns the absolute value of the given number.\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\nfun abs(number: Int): Int\n</code></pre> <pre><code>/**\n * Returns the absolute value of the given number.\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\nvoid abs(int number) {}\n</code></pre> <pre><code>/**\n * Returns the absolute value of the given number.\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\ndef abs(int number) {}\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>/**\n * Returns the absolute value of the given number.\n *\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\nfun abs(number: Int): Int\n</code></pre> <pre><code>/**\n * Returns the absolute value of the given number.\n *\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\nvoid abs(int number) {}\n</code></pre> <pre><code>/**\n * Returns the absolute value of the given number.\n *\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\ndef abs(int number) {}\n</code></pre>"},{"location":"rules/#case-separator","title":"Case separator","text":"<p>Multiline switch-case entries end with a blank line while short entries are joined.</p> <p>Before</p> KotlinJavaPython <pre><code>when {\n    event.isCancelled() -&gt; return\n\n    event.date &lt; now -&gt; {\n        val message = \"Event is in the past\"\n        throw IllegalStateException(message)\n    }\n    else -&gt; createEvent(event)\n}\n</code></pre> <pre><code>switch (event) {\n    case CANCELLED:\n        return;\n\n    case PAST:\n        String message = \"Event is in the past\";\n        throw new IllegalStateException(message);\n    default:\n        createEvent(event);\n}\n</code></pre> <pre><code>match event:\n    case CANCELLED:\n        return\n\n    case PAST:\n        message = \"Event is in the past\"\n        raise ValueError(message)\n    case _:\n        create_event(event)\n</code></pre> <p>After</p> KotlinJavaPython <pre><code>when {\n    event.isCancelled() -&gt; return\n    event.date &lt; now -&gt; {\n        val message = \"Event is in the past\"\n        throw IllegalStateException(message)\n    }\n\n    else -&gt; createEvent(event)\n}\n</code></pre> <pre><code>switch (event) {\n    case CANCELLED:\n        return;\n    case PAST:\n        String message = \"Event is in the past\";\n        throw new IllegalStateException(message);\n\n    default:\n        createEvent(event);\n}\n</code></pre> <pre><code>match event:\n    case CANCELLED:\n        return\n    case PAST:\n        message = \"Event is in the past\"\n        raise ValueError(message)\n\n    case _:\n        create_event(event)\n</code></pre>"},{"location":"rules/#code-block-trim","title":"Code block trim","text":"<p>Prohibits empty first and last lines in code blocks.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun onReceive(value: Int?) {\n\n    if (value != null) {\n        total += value\n\n    }\n}\n</code></pre> <pre><code>void onReceive(Integer value) {\n\n    if (value != null) {\n        total += value;\n\n    }\n}\n</code></pre> <pre><code>def onReceive(Integer value) {\n\n    if (value != null) {\n        total += value\n\n    }\n}\n</code></pre> <pre><code>def on_receive(value):\n\n    if value is not None:\n        total += value\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun onReceive(value: Int?) {\n    if (value != null) {\n        total += value\n    }\n}\n</code></pre> <pre><code>void onReceive(Integer value) {\n    if (value != null) {\n        total += value;\n    }\n}\n</code></pre> <pre><code>def onReceive(Integer value) {\n    if (value != null) {\n        total += value\n    }\n}\n</code></pre> <pre><code>def on_receive(value):\n    if value is not None:\n        total += value\n</code></pre>"},{"location":"rules/#comment-spaces","title":"Comment spaces","text":"<p>End-of-file comments should be separated by a single whitespace from the preceding code, and start with a single whitespace.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>println(\"This is a code\")//This is a comment\n</code></pre> <pre><code>System.out.println(\"This is a code\");//This is a comment\n</code></pre> <pre><code>println('This is a code')//This is a comment\n</code></pre> <pre><code>print('This is a code')#This is a comment\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>println(\"This is a code\") // This is a comment\n</code></pre> <pre><code>System.out.println(\"This is a code\"); // This is a comment\n</code></pre> <pre><code>println('This is a code') // This is a comment\n</code></pre> <pre><code>print('This is a code')  # This is a comment\n</code></pre>"},{"location":"rules/#comment-trim","title":"Comment trim","text":"<p>Prohibits empty first and last lines in EOL comments.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>//\n// This is a\n// multiline comment\n//\n</code></pre> <pre><code>//\n// This is a\n// multiline comment\n//\n</code></pre> <pre><code>//\n// This is a\n// multiline comment\n//\n</code></pre> <pre><code>#\n# This is a\n# multiline comment\n#\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>// This is a\n// multiline comment\n</code></pre> <pre><code>// This is a\n// multiline comment\n</code></pre> <pre><code>// This is a\n// multiline comment\n</code></pre> <pre><code># This is a\n# multiline comment\n</code></pre>"},{"location":"rules/#duplicate-blank-line","title":"Duplicate blank line","text":"<p>Prohibits consecutive blank lines in the code.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>val message = \"Hello\"\n\n\nprintln(message)\n</code></pre> <pre><code>String message = \"Hello\";\n\n\nSystem.out.println(message);\n</code></pre> <pre><code>var message = 'Hello'\n\n\nprintln(message)\n</code></pre> <pre><code>message = 'Hello'\n\n\nprint(message)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>val message = \"Hello\"\n\nprintln(message)\n</code></pre> <pre><code>String message = \"Hello\";\n\nSystem.out.println(message);\n</code></pre> <pre><code>var message = 'Hello'\n\nprintln(message)\n</code></pre> <pre><code>message = 'Hello'\n\nprint(message)\n</code></pre>"},{"location":"rules/#duplicate-blank-line-in-block-comment","title":"Duplicate blank line in block comment","text":"<p>Prohibits consecutive blank lines in block comments.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>/**\n * This is a\n *\n *\n * very long comment\n */\n</code></pre> <pre><code>/**\n * This is a\n *\n *\n * very long comment\n */\n</code></pre> <pre><code>/**\n * This is a\n *\n *\n * very long comment\n */\n</code></pre> <pre><code># This is a\n#\n#\n# very long comment\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>/**\n * This is a\n *\n * very long comment\n */\n</code></pre> <pre><code>/**\n * This is a\n *\n * very long comment\n */\n</code></pre> <pre><code>/**\n * This is a\n *\n * very long comment\n */\n</code></pre> <pre><code># This is a\n#\n# very long comment\n</code></pre>"},{"location":"rules/#duplicate-blank-line-in-comment","title":"Duplicate blank line in comment","text":"<p>Prohibits consecutive blank lines in comments.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>// This is a\n//\n//\n// very long comment\n</code></pre> <pre><code>// This is a\n//\n//\n// very long comment\n</code></pre> <pre><code>// This is a\n//\n//\n// very long comment\n</code></pre> <pre><code># This is a\n#\n#\n# very long comment\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>// This is a\n//\n// very long comment\n</code></pre> <pre><code>// This is a\n//\n// very long comment\n</code></pre> <pre><code>// This is a\n//\n// very long comment\n</code></pre> <pre><code># This is a\n#\n# very long comment\n</code></pre>"},{"location":"rules/#member-separator","title":"Member separator","text":"<p>Class, function and property declarations should be separated by a blank line. There is an exception for single-line properties.</p> <p>Before</p> KotlinJavaPython <pre><code>interface Vehicle {\n    val wheels: Int\n    fun start()\n}\n</code></pre> <pre><code>interface Vehicle {\n    int getWheels();\n\n    void start();\n}\n</code></pre> <pre><code>class Vehicle:\n    wheels: int\n\n    def start(self):\n        pass\n</code></pre> <p>After</p> KotlinJavaPython <pre><code>interface Vehicle {\n    val wheels: Int\n\n    fun start()\n}\n</code></pre> <pre><code>interface Vehicle {\n    int getWheels();\n\n    void start();\n}\n</code></pre> <pre><code>class Vehicle:\n    wheels: int\n\n    def start(self):\n        pass\n</code></pre>"},{"location":"rules/#unexpected-blank-line-before-package","title":"Unexpected blank line before package","text":"<p>The first line of a file cannot be a blank line.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>package com.example\n\nfun execute() {}\n</code></pre> <pre><code>package com.example;\n\nvoid execute() {}\n</code></pre> <pre><code>package com.example\n\ndef execute() {}\n</code></pre> <pre><code>def execute():\n    pass\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>package com.example\n\nfun execute() {}\n</code></pre> <pre><code>package com.example;\n\nvoid execute() {}\n</code></pre> <pre><code>package com.example\n\ndef execute() {}\n</code></pre> <pre><code>def execute():\n    pass\n</code></pre>"},{"location":"rules/#stating","title":"Stating","text":""},{"location":"rules/#illegal-catch","title":"Illegal catch","text":"<p>Catch specific exception subclass instead of the generic <code>Throwable</code>, <code>Exception</code> or <code>Error</code>.</p> <p>Before</p> JavaGroovyPython <pre><code>try {\n    unsafeOperation();\n} catch (Throwable e) {\n    e.printStackTrace();\n}\n</code></pre> <pre><code>try {\n    unsafeOperation()\n} catch (Throwable e) {\n    e.printStackTrace()\n}\n</code></pre> <pre><code>try:\n    unsafe_operation()\nexcept Exception as e:\n    print(e)\n</code></pre> <p>After</p> JavaGroovyPython <pre><code>try {\n    unsafeOperation();\n} catch (IOException | SQLException e) {\n    e.printStackTrace();\n}\n</code></pre> <pre><code>try {\n    unsafeOperation()\n} catch (IOException | SQLException e) {\n    e.printStackTrace()\n}\n</code></pre> <pre><code>try:\n    unsafe_operation()\nexcept (IOError, OSError) as e:\n    print(e)\n</code></pre>"},{"location":"rules/#illegal-throw","title":"Illegal throw","text":"<p>Throw a narrower exception type instead of <code>Exception</code>, <code>Error</code> or <code>Throwable</code>.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>throw Exception()\n</code></pre> <pre><code>throw new Exception();\n</code></pre> <pre><code>throw new Exception()\n</code></pre> <pre><code>raise Exception()\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>throw IllegalStateException()\n</code></pre> <pre><code>throw new IllegalStateException();\n</code></pre> <pre><code>throw new IllegalStateException()\n</code></pre> <pre><code>raise ValueError()\n</code></pre>"},{"location":"rules/#missing-braces","title":"Missing braces","text":"<p>Enforces the use of braces for multiline <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code> and <code>do</code> statements.</p> <p>Before</p> KotlinJavaGroovy <pre><code>if (validateCart(cart))\n    processPayment(credentials)\nelse\n    showError()\n</code></pre> <pre><code>if (validateCart(cart))\n    processPayment(credentials);\nelse\n    showError();\n</code></pre> <pre><code>if (validateCart(cart))\n    processPayment(credentials)\nelse\n    showError()\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>if (validateCart(cart)) {\n    processPayment(credentials)\n} else {\n    showError()\n}\n</code></pre> <pre><code>if (validateCart(cart)) {\n    processPayment(credentials);\n} else {\n    showError();\n}\n</code></pre> <pre><code>if (validateCart(cart)) {\n    processPayment(credentials)\n} else {\n    showError()\n}\n</code></pre>"},{"location":"rules/#nested-if-else","title":"Nested if-else","text":"<p>If a block ends with an if statement without else and the body is at least 2 lines, it should be inverted to avoid nesting and unnecessary indentation.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun login(user: User) {\n    if (user.isValid()) {\n        if (!isLoggedIn(user)) {\n            updateProfile(user)\n            displayDashboard()\n        }\n    }\n}\n</code></pre> <pre><code>void login(User user) {\n    if (user.isValid()) {\n        if (!isLoggedIn(user)) {\n            updateProfile(user);\n            displayDashboard();\n        }\n    }\n}\n</code></pre> <pre><code>def login(User user) {\n    if (user.isValid()) {\n        if (!isLoggedIn(user)) {\n            updateProfile(user)\n            displayDashboard()\n        }\n    }\n}\n</code></pre> <pre><code>def login(user: User):\n    if user.is_valid():\n        if not is_logged_in(user):\n            update_profile(user)\n            display_dashboard()\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun login(user: User) {\n    if (!user.isValid()) {\n        return\n    }\n    if (isLoggedIn(user)) {\n        return\n    }\n    updateProfile(user)\n    displayDashboard()\n}\n</code></pre> <pre><code>void login(User user) {\n    if (!user.isValid()) {\n        return;\n    }\n    if (isLoggedIn(user)) {\n        return;\n    }\n    updateProfile(user);\n    displayDashboard();\n}\n</code></pre> <pre><code>def login(User user) {\n    if (!user.isValid()) {\n        return\n    }\n    if (isLoggedIn(user)) {\n        return\n    }\n    updateProfile(user)\n    displayDashboard()\n}\n</code></pre> <pre><code>def login(user: User):\n    if not user.is_valid():\n        return\n    if is_logged_in(user):\n        return\n    update_profile(user)\n    display_dashboard()\n</code></pre>"},{"location":"rules/#redundant-default","title":"Redundant default","text":"<p>If every branch of a switch statement has a return or throw statement, the default branch can be lifted.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun park(car: Car) {\n    when {\n        car.isMoving() -&gt; throw IllegalStateException()\n        car.isParked() -&gt; return\n        else -&gt; findParking(car)\n    }\n}\n</code></pre> <pre><code>void park(Car car) {\n    switch (car) {\n        case MOVING:\n            throw new IllegalStateException();\n        case PARKED:\n            return;\n        default:\n            findParking(car);\n    }\n}\n</code></pre> <pre><code>def park(Car car) {\n    switch (car) {\n        case MOVING:\n            throw new IllegalStateException()\n        case PARKED:\n            return\n        default:\n            findParking(car)\n    }\n}\n</code></pre> <pre><code>def park(car: Car):\n    match car:\n        case Car.MOVING:\n            raise ValueError()\n        case Car.PARKED:\n            return\n        case _:\n            find_parking(car)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun park(car: Car) {\n    when {\n        car.isMoving() -&gt; throw IllegalStateException()\n        car.isParked() -&gt; return\n    }\n    findParking(car)\n}\n</code></pre> <pre><code>void park(Car car) {\n    switch (car) {\n        case MOVING:\n            throw new IllegalStateException();\n        case PARKED:\n            return;\n    }\n    findParking(car);\n}\n</code></pre> <pre><code>def park(Car car) {\n    switch (car) {\n        case MOVING:\n            throw new IllegalStateException()\n        case PARKED:\n            return\n    }\n    findParking(car)\n}\n</code></pre> <pre><code>def park(car: Car):\n    match car:\n        case Car.MOVING:\n            raise ValueError()\n        case Car.PARKED:\n            return\n    find_parking(car)\n</code></pre>"},{"location":"rules/#redundant-else","title":"Redundant else","text":"<p>When every if and else-if block has a return or throw statement, the else block can be lifted.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun park(car: Car) {\n    if (car.isMoving()) {\n        throw IllegalStateException()\n    } else if (car.isParked()) {\n        return\n    } else {\n        findParking(car)\n    }\n}\n</code></pre> <pre><code>void park(Car car) {\n    if (car.isMoving()) {\n        throw new IllegalStateException();\n    } else if (car.isParked()) {\n        return;\n    } else {\n        findParking(car);\n    }\n}\n</code></pre> <pre><code>def park(Car car) {\n    if (car.isMoving()) {\n        throw new IllegalStateException()\n    } else if (car.isParked()) {\n        return\n    } else {\n        findParking(car)\n    }\n}\n</code></pre> <pre><code>def park(car: Car):\n    if car.is_moving():\n        raise ValueError()\n    elif car.is_parked():\n        return\n    else:\n        find_parking(car)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun park(car: Car) {\n    if (car.isMoving()) {\n        throw IllegalStateException()\n    } else if (car.isParked()) {\n        return\n    }\n    findParking(car)\n}\n</code></pre> <pre><code>void park(Car car) {\n    if (car.isMoving()) {\n        throw new IllegalStateException();\n    } else if (car.isParked()) {\n        return;\n    }\n    findParking(car);\n}\n</code></pre> <pre><code>def park(Car car) {\n    if (car.isMoving()) {\n        throw new IllegalStateException()\n    } else if (car.isParked()) {\n        return\n    }\n    findParking(car)\n}\n</code></pre> <pre><code>def park(car: Car):\n    if car.is_moving():\n        raise ValueError()\n    elif car.is_parked():\n        return\n    find_parking(car)\n</code></pre>"},{"location":"rules/#unnecessary-switch","title":"Unnecessary switch","text":"<p>If a switch statement has single branch, it should be replaced with an if statement.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>when (token) {\n    is Token.ValueToken -&gt; callback(token)\n}\n</code></pre> <pre><code>switch (token) {\n    case VALUE_TOKEN:\n        callback(token);\n}\n</code></pre> <pre><code>switch (token) {\n    case VALUE_TOKEN:\n        callback(token)\n}\n</code></pre> <pre><code>match token:\n    case Token.VALUE_TOKEN:\n        callback(token)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>if (token is Token.ValueToken) {\n    callback(token)\n}\n</code></pre> <pre><code>if (token == Token.VALUE_TOKEN) {\n    callback(token);\n}\n</code></pre> <pre><code>if (token == Token.VALUE_TOKEN) {\n    callback(token)\n}\n</code></pre> <pre><code>if token == Token.VALUE_TOKEN:\n    callback(token)\n</code></pre>"},{"location":"rules/#wrapping","title":"Wrapping","text":""},{"location":"rules/#assignment-wrap","title":"Assignment wrap","text":"<p>Assignee and the value of assignment spanning multiple lines should be separated by a newline.</p> <p>Before</p> KotlinJavaGroovy <pre><code>val message = buildString {\n    append(\"Hello\")\n}\n</code></pre> <pre><code>String message = new StringBuilder()\n    .append(\"Hello\")\n    .toString();\n</code></pre> <pre><code>val message = new StringBuilder()\n    .append('Hello')\n    .toString()\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>val message =\n    buildString {\n        append(\"Hello\")\n    }\n</code></pre> <pre><code>String message =\n    new StringBuilder()\n        .append(\"Hello\")\n        .toString();\n</code></pre> <pre><code>var message =\n    new StringBuilder()\n        .append('Hello')\n        .toString()\n</code></pre>"},{"location":"rules/#block-comment-unwrap","title":"Block comment unwrap","text":"<p>Short block comments should be written in a single line.</p> <p>Before</p> Kotlin <pre><code>/**\n * The quick brown fox jumps over the lazy dog.\n */\n</code></pre> <p>After</p> Kotlin <pre><code>/** The quick brown fox jumps over the lazy dog. */\n</code></pre>"},{"location":"rules/#chain-call-wrap","title":"Chain call wrap","text":"<p>Each method call in a chain should be aligned with the dot operator.</p> <p>Before</p> KotlinJava <pre><code>val senderId =\n    notification.getSender()\n        .id.takeIf { it.isNotBlank() }\n</code></pre> <pre><code>int senderId =\n    notification.getSender()\n        .getId();\n</code></pre> <p>After</p> KotlinJava <pre><code>val senderId =\n    notification\n        .getSender()\n        .id\n</code></pre> <pre><code>int senderId =\n    notification\n        .getSender()\n        .getId();\n</code></pre>"},{"location":"rules/#elvis-wrap","title":"Elvis wrap","text":"<p>In a multiline statement, the elvis operator should be separated into a new line instead of trailing the statement.</p> <p>Before</p> Kotlin <pre><code>user.name\n    .takeIf { it.isNotBlank() } ?: \"Unknown\"\n</code></pre> <p>After</p> Kotlin <pre><code>user.name\n    .takeIf { it.isNotBlank() }\n    ?: \"Unknown\"\n</code></pre>"},{"location":"rules/#empty-code-block-unwrap","title":"Empty code block unwrap","text":"<p>Empty code blocks should not contain any other characters in between the braces.</p> <p>Before</p> KotlinJava <pre><code>fun main() {\n}\n</code></pre> <pre><code>void main() {\n}\n</code></pre> <p>After</p> KotlinJava <pre><code>fun main() {}\n</code></pre> <pre><code>void main() {}\n</code></pre>"},{"location":"rules/#infix-call-wrap","title":"Infix call wrap","text":"<p>When breaking an infix function call, the operator should be placed at the end of the line.</p> <p>Before</p> Kotlin <pre><code>val ages =\n    mapOf(\n        \"Alice\"\n            to 25,\n        \"Bob\"\n            to 30,\n    )\n</code></pre> <p>After</p> Kotlin <pre><code>val ages =\n    mapOf(\n        \"Alice\" to\n            25,\n        \"Bob\" to\n            30,\n    )\n</code></pre>"},{"location":"rules/#lambda-wrap","title":"Lambda wrap","text":"<p>When breaking a multiline lambda expression, the body should be placed on a new line.</p> <p>Before</p> Java <pre><code>int sum =\n    IntStream\n        .range(0, 10)\n        .map(\n          i -&gt; i\n            * 2\n        ).sum();\n</code></pre> <p>After</p> Java <pre><code>int sum =\n    IntStream\n        .range(0, 10)\n        .map(\n            i -&gt;\n              i * 2\n        ).sum();\n</code></pre>"},{"location":"rules/#operator-wrap","title":"Operator wrap","text":"<p>A line break should be placed after the operator in a binary expression.</p> <p>Before</p> KotlinJavaGroovy <pre><code>val total =\n    subtotal\n    + tax\n    - discount\n</code></pre> <pre><code>int total =\n    subtotal\n    + tax\n    - discount;\n</code></pre> <pre><code>var total =\n    subtotal\n    + tax\n    - discount\n</code></pre> <p>After</p> KotlinJavaGroovy <pre><code>val total =\n    subtotal +\n    tax -\n    discount\n</code></pre> <pre><code>int total =\n    subtotal +\n    tax -\n    discount;\n</code></pre> <pre><code>var total =\n    subtotal +\n    tax -\n    discount\n</code></pre>"},{"location":"rules/#parameter-wrap","title":"Parameter wrap","text":"<p>When breaking a multiline parameter list, each parameter should be placed on a new line.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>fun createUser(\n    name: String, email: String, age: Int\n)\n</code></pre> <pre><code>void createUser(\n    String name, String email, int age\n)\n</code></pre> <pre><code>def createUser(\n    String name, String email, int age\n)\n</code></pre> <pre><code>def create_user(\n    name: str, email: str, age: int\n)\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>fun createUser(\n    name: String,\n    email: String,\n    age: Int,\n)\n</code></pre> <pre><code>void createUser(\n    String name,\n    String email,\n    int age\n)\n</code></pre> <pre><code>def createUser(\n    String name,\n    String email,\n    int age,\n)\n</code></pre> <pre><code>def create_user(\n    name: str,\n    email: str,\n    age: int,\n)\n</code></pre>"},{"location":"rules/#statement-wrap","title":"Statement wrap","text":"<p>Compound statements are not allowed.</p> <p>Before</p> KotlinJavaGroovyPython <pre><code>val x = 0; val y = 0\n</code></pre> <pre><code>int x = 0; int y = 0;\n</code></pre> <pre><code>var x = 0; var y = 0\n</code></pre> <pre><code>x = 0; y = 0\n</code></pre> <p>After</p> KotlinJavaGroovyPython <pre><code>val x = 0\nval y = 0\n</code></pre> <pre><code>int x = 0;\nint y = 0;\n</code></pre> <pre><code>var x = 0\nvar y = 0\n</code></pre> <pre><code>x = 0\ny = 0\n</code></pre>"},{"location":"rules/editorconfig_file/","title":"EditorConfig file","text":"<p>Configuration starts with standard preset from EditorConfig Wiki. Then, apply code snippets from sub-section according to which lint tools.</p> <pre><code>root = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n</code></pre>"},{"location":"rules/editorconfig_file/#ktlint-official-style","title":"Ktlint Official Style","text":"<pre><code>[*.kt]\nindent_size = 4\nmax_line_length = 100\nij_kotlin_code_style_defaults = KOTLIN_OFFICIAL\nij_kotlin_packages_to_use_import_on_demand = unset\nij_kotlin_name_count_to_use_star_import = 99\nij_kotlin_name_count_to_use_star_import_for_members = 99\nktlint_class_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than = unset\nktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than = unset\nktlint_chain_method_rule_force_multiline_when_chain_operator_count_greater_or_equal_than = unset\n</code></pre>"},{"location":"rules/editorconfig_file/#sun-java-style","title":"Sun Java Style","text":"<pre><code>[*.java]\nindent_size = 4\nmax_line_length = 100\nij_java_use_single_class_imports = true\nij_java_class_count_to_use_import_on_demand = 99\nij_java_names_count_to_use_import_on_demand = 99\n</code></pre>"},{"location":"rules/editorconfig_file/#groovy-style","title":"Groovy Style","text":"<pre><code>[*.groovy]\nindent_size = 4\nmax_line_length = 100\nij_groovy_use_single_class_imports = true\nij_groovy_class_count_to_use_import_on_demand = 99\nij_groovy_names_count_to_use_import_on_demand = 99\n</code></pre>"},{"location":"rules/editorconfig_file/#python-style","title":"Python Style","text":"<pre><code>[*.groovy]\nindent_size = 4\nmax_line_length = 100\n</code></pre>"},{"location":"rules/naming_convention/","title":"Naming convention","text":"<p>Rule names are in form of state (<code>missing-braces</code>) or object (<code>package-name</code>). They are grouped by the intended objective (<code>spacing</code>) rather than the target site (<code>imports</code>). The rule messages that are printed to the console are in the form of verb phrase (<code>Add missing braces</code> or <code>Rename package</code>).</p> <p>When possible, merge rules of relatable targets that achieve the same goal. For example, <code>missing-if-braces</code> and <code>missing-for-braces</code> can be merged into <code>control-flow-bracing</code>. Ignore this guideline if one of the rules is not applicable by the linter tool or in the language.</p>"}]}