block.tag.punctuation=End ''{0}'' with a period.
redundant.qualifier=Remove redundant qualifier.
# Declaring
number.suffix.for.double=Doubles are tagged by 'd'.
number.suffix.for.float=Floats are tagged by 'f'.
# Defining
abstract.class.definition=Remove abstract modifier.
exception.inheritance=Extend from Exception class.
# Naming
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Utility class should be named ''{0}''.
# Ordering
built.in.function.position=Put ''{0}'' last.
member.order=Put member ''{0}'' before ''{1}''.
# Stating
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if'.
redundant.default=Remove redundant 'default'.
redundant.else=Remove redundant 'else'.
unnecessary.switch=Replace 'switch' with 'if'.
# Spacing
block.comment.trim.first=Unexpected newline after '/**'.
block.comment.trim.last=Unexpected newline before '*/'.
case.separator.missing=Missing newline after multiline branch.
case.separator.unexpected=Unexpected newline after single-line branch.
code.block.trim.first=Unexpected newline after '{'.
code.block.trim.last=Unexpected newline before '}'.
comment.spaces=Missing space after '//'.
comment.trim=Unexpected newline after '//'.
duplicate.blank.line=Unexpected consecutive newline.
duplicate.blank.line.in.block.comment=Unexpected consecutive newline after '*'.
duplicate.blank.line.in.comment=Unexpected consecutive newline after '//'.
unexpected.blank.line.before.package=Unexpected newline at the beginning.
# Wrapping
assignment.wrap=Break assignment into newline.
chain.call.wrap.missing=Missing newline before '.'.
chain.call.wrap.unexpected=Unexpected newline before '.'.
lambda.wrap=Expression should start after newline.
parameter.wrap.parenthesis=Do not join parentheses with parameters.
parameter.wrap.argument=Each parameter should have a newline.
# Others
class=class
constructor=constructor
function=function
property=property
