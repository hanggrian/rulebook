block.tag.punctuation=End ''{0}'' with a period.
redundant.qualifier=Omit redundant qualifier.
# Declaring
abstract.class.definition=Omit 'abstract' modifier.
exception.inheritance=Extend from class 'Exception'.
number.suffix.for.double=Tag double literal by 'd'.
number.suffix.for.float=Tag float literal by 'f'.
unnecessary.parentheses.in.lambda=Omit parentheses '()'.
# Naming
illegal.class.final.name.all=Avoid meaningless word ''{0}''.
illegal.class.final.name.util=Rename utility class to ''{0}''.
# Ordering
built.in.function.position=Move ''{0}'' to last.
member.order=Arrange member ''{0}'' before ''{1}''.
# Spacing
case.separator.missing=Add blank line after multiline branch.
case.separator.unexpected=Remove blank line after single-line branch.
comment.spaces=Put space after '//'.
duplicate.blank.line=Remove consecutive blank line.
duplicate.blank.line.in.block.comment=Remove consecutive blank line after '*'.
duplicate.blank.line.in.comment=Remove consecutive blank line after '//'.
unnecessary.blank.line.before.package=Remove blank line at the beginning.
# Stating
nested.if.else.invert=Invert 'if' condition.
nested.if.else.lift=Lift 'else' and add 'return' in 'if' block.
redundant.default=Omit redundant 'default' condition.
redundant.else=Omit redundant 'else' condition.
unnecessary.switch=Replace 'switch' with 'if' condition.
# Trimming
block.comment.trim.first=Remove blank line after '/**'.
block.comment.trim.last=Remove blank line before '*/'.
braces.trim.first=Remove blank line after '{'.
braces.trim.last=Remove blank line before '}'.
comment.trim=Remove blank line after '//'.
parentheses.trim.first=Remove blank line after '('.
parentheses.trim.last=Remove blank line before ')'.
tags.trim.first=Remove blank line after '<'.
tags.trim.last=Remove blank line before '>'.
# Wrapping
assignment.wrap=Break assignment into newline.
chain.call.wrap.missing=Put newline before '.'.
chain.call.wrap.unexpected=Omit newline before '.'.
lambda.wrap=Put newline after '->'.
parameter.wrap=Break each parameter into newline.
